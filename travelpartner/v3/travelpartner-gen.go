// Copyright 2024 Google LLC.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated file. DO NOT EDIT.

// Package travelpartner provides access to the Travel Partner API.
//
// For product documentation, see: https://developers.google.com/hotels/hotel-prices/api-reference
//
// # Library status
//
// These client libraries are officially supported by Google. However, this
// library is considered complete and is in maintenance mode. This means
// that we will address critical bugs and security issues but will not add
// any new features.
//
// When possible, we recommend using our newer
// [Cloud Client Libraries for Go](https://pkg.go.dev/cloud.google.com/go)
// that are still actively being worked and iterated on.
//
// # Creating a client
//
// Usage example:
//
//	import "google.golang.org/api/travelpartner/v3"
//	...
//	ctx := context.Background()
//	travelpartnerService, err := travelpartner.NewService(ctx)
//
// In this example, Google Application Default Credentials are used for
// authentication. For information on how to create and obtain Application
// Default Credentials, see https://developers.google.com/identity/protocols/application-default-credentials.
//
// # Other authentication options
//
// To use an API key for authentication (note: some APIs do not support API
// keys), use [google.golang.org/api/option.WithAPIKey]:
//
//	travelpartnerService, err := travelpartner.NewService(ctx, option.WithAPIKey("AIza..."))
//
// To use an OAuth token (e.g., a user token obtained via a three-legged OAuth
// flow, use [google.golang.org/api/option.WithTokenSource]:
//
//	config := &oauth2.Config{...}
//	// ...
//	token, err := config.Exchange(ctx, ...)
//	travelpartnerService, err := travelpartner.NewService(ctx, option.WithTokenSource(config.TokenSource(ctx, token)))
//
// See [google.golang.org/api/option.ClientOption] for details on options.
package travelpartner // import "google.golang.org/api/travelpartner/v3"

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	googleapi "google.golang.org/api/googleapi"
	internal "google.golang.org/api/internal"
	gensupport "google.golang.org/api/internal/gensupport"
	option "google.golang.org/api/option"
	internaloption "google.golang.org/api/option/internaloption"
	htransport "google.golang.org/api/transport/http"
)

// Always reference these packages, just in case the auto-generated code
// below doesn't.
var _ = bytes.NewBuffer
var _ = strconv.Itoa
var _ = fmt.Sprintf
var _ = json.NewDecoder
var _ = io.Copy
var _ = url.Parse
var _ = gensupport.MarshalJSON
var _ = googleapi.Version
var _ = errors.New
var _ = strings.Replace
var _ = context.Canceled
var _ = internaloption.WithDefaultEndpoint
var _ = internal.Version

const apiId = "travelpartner:v3"
const apiName = "travelpartner"
const apiVersion = "v3"
const basePath = "https://travelpartner.googleapis.com/"
const mtlsBasePath = "https://travelpartner.mtls.googleapis.com/"

// NewService creates a new Service.
func NewService(ctx context.Context, opts ...option.ClientOption) (*Service, error) {
	opts = append(opts, internaloption.WithDefaultEndpoint(basePath))
	opts = append(opts, internaloption.WithDefaultMTLSEndpoint(mtlsBasePath))
	client, endpoint, err := htransport.NewClient(ctx, opts...)
	if err != nil {
		return nil, err
	}
	s, err := New(client)
	if err != nil {
		return nil, err
	}
	if endpoint != "" {
		s.BasePath = endpoint
	}
	return s, nil
}

// New creates a new Service. It uses the provided http.Client for requests.
//
// Deprecated: please use NewService instead.
// To provide a custom HTTP client, use option.WithHTTPClient.
// If you are using google.golang.org/api/googleapis/transport.APIKey, use option.WithAPIKey with NewService instead.
func New(client *http.Client) (*Service, error) {
	if client == nil {
		return nil, errors.New("client is nil")
	}
	s := &Service{client: client, BasePath: basePath}
	s.Accounts = NewAccountsService(s)
	return s, nil
}

type Service struct {
	client    *http.Client
	BasePath  string // API endpoint base URL
	UserAgent string // optional additional User-Agent fragment

	Accounts *AccountsService
}

func (s *Service) userAgent() string {
	if s.UserAgent == "" {
		return googleapi.UserAgent
	}
	return googleapi.UserAgent + " " + s.UserAgent
}

func NewAccountsService(s *Service) *AccountsService {
	rs := &AccountsService{s: s}
	rs.AccountLinks = NewAccountsAccountLinksService(s)
	rs.Brands = NewAccountsBrandsService(s)
	rs.FreeBookingLinksReportViews = NewAccountsFreeBookingLinksReportViewsService(s)
	rs.HotelViews = NewAccountsHotelViewsService(s)
	rs.Hotels = NewAccountsHotelsService(s)
	rs.Icons = NewAccountsIconsService(s)
	rs.Listings = NewAccountsListingsService(s)
	rs.ParticipationReportViews = NewAccountsParticipationReportViewsService(s)
	rs.PriceAccuracyViews = NewAccountsPriceAccuracyViewsService(s)
	rs.PriceCoverageViews = NewAccountsPriceCoverageViewsService(s)
	rs.PriceViews = NewAccountsPriceViewsService(s)
	rs.PropertyPerformanceReportViews = NewAccountsPropertyPerformanceReportViewsService(s)
	rs.ReconciliationReports = NewAccountsReconciliationReportsService(s)
	return rs
}

type AccountsService struct {
	s *Service

	AccountLinks *AccountsAccountLinksService

	Brands *AccountsBrandsService

	FreeBookingLinksReportViews *AccountsFreeBookingLinksReportViewsService

	HotelViews *AccountsHotelViewsService

	Hotels *AccountsHotelsService

	Icons *AccountsIconsService

	Listings *AccountsListingsService

	ParticipationReportViews *AccountsParticipationReportViewsService

	PriceAccuracyViews *AccountsPriceAccuracyViewsService

	PriceCoverageViews *AccountsPriceCoverageViewsService

	PriceViews *AccountsPriceViewsService

	PropertyPerformanceReportViews *AccountsPropertyPerformanceReportViewsService

	ReconciliationReports *AccountsReconciliationReportsService
}

func NewAccountsAccountLinksService(s *Service) *AccountsAccountLinksService {
	rs := &AccountsAccountLinksService{s: s}
	return rs
}

type AccountsAccountLinksService struct {
	s *Service
}

func NewAccountsBrandsService(s *Service) *AccountsBrandsService {
	rs := &AccountsBrandsService{s: s}
	return rs
}

type AccountsBrandsService struct {
	s *Service
}

func NewAccountsFreeBookingLinksReportViewsService(s *Service) *AccountsFreeBookingLinksReportViewsService {
	rs := &AccountsFreeBookingLinksReportViewsService{s: s}
	return rs
}

type AccountsFreeBookingLinksReportViewsService struct {
	s *Service
}

func NewAccountsHotelViewsService(s *Service) *AccountsHotelViewsService {
	rs := &AccountsHotelViewsService{s: s}
	return rs
}

type AccountsHotelViewsService struct {
	s *Service
}

func NewAccountsHotelsService(s *Service) *AccountsHotelsService {
	rs := &AccountsHotelsService{s: s}
	return rs
}

type AccountsHotelsService struct {
	s *Service
}

func NewAccountsIconsService(s *Service) *AccountsIconsService {
	rs := &AccountsIconsService{s: s}
	return rs
}

type AccountsIconsService struct {
	s *Service
}

func NewAccountsListingsService(s *Service) *AccountsListingsService {
	rs := &AccountsListingsService{s: s}
	return rs
}

type AccountsListingsService struct {
	s *Service
}

func NewAccountsParticipationReportViewsService(s *Service) *AccountsParticipationReportViewsService {
	rs := &AccountsParticipationReportViewsService{s: s}
	return rs
}

type AccountsParticipationReportViewsService struct {
	s *Service
}

func NewAccountsPriceAccuracyViewsService(s *Service) *AccountsPriceAccuracyViewsService {
	rs := &AccountsPriceAccuracyViewsService{s: s}
	return rs
}

type AccountsPriceAccuracyViewsService struct {
	s *Service
}

func NewAccountsPriceCoverageViewsService(s *Service) *AccountsPriceCoverageViewsService {
	rs := &AccountsPriceCoverageViewsService{s: s}
	return rs
}

type AccountsPriceCoverageViewsService struct {
	s *Service
}

func NewAccountsPriceViewsService(s *Service) *AccountsPriceViewsService {
	rs := &AccountsPriceViewsService{s: s}
	return rs
}

type AccountsPriceViewsService struct {
	s *Service
}

func NewAccountsPropertyPerformanceReportViewsService(s *Service) *AccountsPropertyPerformanceReportViewsService {
	rs := &AccountsPropertyPerformanceReportViewsService{s: s}
	return rs
}

type AccountsPropertyPerformanceReportViewsService struct {
	s *Service
}

func NewAccountsReconciliationReportsService(s *Service) *AccountsReconciliationReportsService {
	rs := &AccountsReconciliationReportsService{s: s}
	return rs
}

type AccountsReconciliationReportsService struct {
	s *Service
}

// AccountLink: An account link. Represents the link between a Google
// Ads customer and a Hotel Ads (Hotel Center) account. An account link
// defines the set of hotels under the Hotel Center account that is
// linked to the Google Ads customer.
type AccountLink struct {
	// AccountLinkTarget: Required for CREATE requests. The properties in
	// the Hotel Center account that can be managed using the linked Google
	// Ads account.
	AccountLinkTarget *AccountLinkTarget `json:"accountLinkTarget,omitempty"`

	// GoogleAdsCustomerName: Required for CREATE requests. The value
	// representing the Google Ads customer ID in the format
	// `customers/{google_ads_customer_id}`. For example:
	// `customers/0123456789`. Note that the `googleAdsCustomerName` field
	// is not returned in responses to GET requests.
	GoogleAdsCustomerName string `json:"googleAdsCustomerName,omitempty"`

	// Name: The resource name for the account link in the format
	// `accounts/{account_id}/accountLinks/{account_link_id}`.
	Name string `json:"name,omitempty"`

	// Status: The current status of the account link.
	//
	// Possible values:
	//   "ACCOUNT_LINK_STATUS_UNSPECIFIED" - Default value.
	//   "ACCOUNT_LINK_STATUS_UNKNOWN" - The account link status is not
	// recognized by this API version.
	//   "REQUESTED_FROM_HOTEL_CENTER" - The account link was initiated
	// through Hotel Center and has not yet been approved in Google Ads.
	//   "REQUESTED_FROM_GOOGLE_ADS" - The account link was initiated
	// through Google Ads and has not yet been approved in Hotel Center.
	//   "APPROVED" - The account link has been approved.
	Status string `json:"status,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AccountLinkTarget")
	// to unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AccountLinkTarget") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *AccountLink) MarshalJSON() ([]byte, error) {
	type NoMethod AccountLink
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// AccountLinkTarget: Defines whether all properties or a subset of
// properties in the Hotel Center account can be managed with the linked
// Google Ads account. If a subset, the specific properties are
// specified.
type AccountLinkTarget struct {
	// AllHotels: True if all properties under the Hotel Center account are
	// made available to the account link. The default is `false`.
	AllHotels bool `json:"allHotels,omitempty"`

	// HotelList: List of properties that is made available to the account
	// link.
	HotelList *HotelList `json:"hotelList,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AllHotels") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AllHotels") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *AccountLinkTarget) MarshalJSON() ([]byte, error) {
	type NoMethod AccountLinkTarget
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// Brand: Brand-level icon and display name configuration. Once
// approved, the icon and display name appear in the search results for
// properties that the partner has assigned to this brand.
type Brand struct {
	// ActiveDisplayNames: Output only. The brand's active display names in
	// all provided languages, only present if the display name is approved
	// for all provided languages.
	ActiveDisplayNames []*LocalizedText `json:"activeDisplayNames,omitempty"`

	// ActiveIcon: Output only. The brand's active accounts.icon
	// (/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-i
	// conresource). The value refers to the icons's resource name in the
	// format `accounts/{account_id}/icons/{icon_id}`. An active icon is one
	// that has been approved.
	ActiveIcon string `json:"activeIcon,omitempty"`

	// ActiveIconUri: Output only. URL of the active icon, only present when
	// the icon has been approved.
	ActiveIconUri string `json:"activeIconUri,omitempty"`

	// DisplayNameDisapprovalReason: Output only. Display name's disapproval
	// reason. Only applies to display names with the review state
	// 'REJECTED'.
	DisplayNameDisapprovalReason []*DisplayNameDisapprovalReason `json:"displayNameDisapprovalReason,omitempty"`

	// DisplayNameState: Output only. The brand's display names review
	// state, which applies to all display name language entries. If there
	// are both submitted and active display names, this refers to the
	// submitted display names.
	//
	// Possible values:
	//   "REVIEW_STATE_UNSPECIFIED" - Default value.
	//   "REVIEW_STATE_NEW" - Google is reviewing the icon or display name.
	//   "APPROVED" - The icon or display name is approved and ready for
	// public display.
	//   "REJECTED" - The icon or display name is rejected. Google won't
	// display it.
	DisplayNameState string `json:"displayNameState,omitempty"`

	// DisplayNames: Input only. The name Google displays for the brand's
	// properties. Setting the display names is only necessary if you want
	// to override the landing page display name or account-level display
	// name for the brand. Google reviews the display names for appropriate
	// content. When there are multiple languages, Google will only show the
	// display names once Google approves all the languages.
	DisplayNames []*LocalizedText `json:"displayNames,omitempty"`

	// Icon: Input only. The brand's accounts.icon
	// (/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-i
	// conresource) identifying the brand's icon. The value refers to the
	// icons's resource name in the format
	// `accounts/{account_id}/icons/{icon_id}`.
	Icon string `json:"icon,omitempty"`

	// IconDisapprovalReasons: Output only. The icon's disapproval
	// reason(s). Only applies to submitted icons with `REJECTED` state.
	//
	// Possible values:
	//   "IMAGE_DISAPPROVAL_REASON_UNSPECIFIED" - Not specified.
	//   "NOT_LIKE_SITE" - Icon image does not match the favicon or artwork
	// on the advertiser’s final URL.
	//   "OFFENSIVE" - Icon image contains offensive content.
	//   "LOW_QUALITY" - Icon image is low quality.
	//   "ANIMATED" - Icon image is animated.
	//   "BAD_BACKGROUND" - Icon image does not have a transparent or
	// non-white background.
	//   "TEXT_TOO_SMALL" - Icon image contains text that is too small.
	IconDisapprovalReasons []string `json:"iconDisapprovalReasons,omitempty"`

	// IconState: Output only. The brand's icon's review state. If there are
	// both submitted and active icons, this refers to the submitted icon.
	//
	// Possible values:
	//   "REVIEW_STATE_UNSPECIFIED" - Default value.
	//   "REVIEW_STATE_NEW" - Google is reviewing the icon or display name.
	//   "APPROVED" - The icon or display name is approved and ready for
	// public display.
	//   "REJECTED" - The icon or display name is rejected. Google won't
	// display it.
	IconState string `json:"iconState,omitempty"`

	// Name: Output only. The resource name for the brand in the format
	// `accounts/{account_id}/brands/{brand_id}`. The `brand_id` corresponds
	// to the partner's brand identifier used for landing page matching and
	// the property-level brand identifier. A default brand is applied to
	// properties that do not have a brand. The `brand_id` of the default
	// brand is `NO_BRAND_ID`. It can be fetched and updated like any
	// configured brand.
	Name string `json:"name,omitempty"`

	// PropertyCount: Output only. The number of properties with the
	// corresponding brand ID.
	PropertyCount int64 `json:"propertyCount,omitempty,string"`

	// SubmittedDisplayNames: Output only. The brand's submitted display
	// names in all provided languages, only present if the display name is
	// new or rejected for any language.
	SubmittedDisplayNames []*LocalizedText `json:"submittedDisplayNames,omitempty"`

	// SubmittedIcon: Output only. The brand's submitted accounts.icon
	// (/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-i
	// conresource). The value refers to the icons's resource name in the
	// format `accounts/{account_id}/icons/{icon_id}`. A submitted icon is
	// one that is new or rejected.
	SubmittedIcon string `json:"submittedIcon,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "ActiveDisplayNames")
	// to unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ActiveDisplayNames") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Brand) MarshalJSON() ([]byte, error) {
	type NoMethod Brand
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// CreateReconciliationReportResponse: Response message for
// ReconciliationReportService.CreateReconciliationReport.
type CreateReconciliationReportResponse struct {
	// Issues: Issues that were encountered when validating the file.
	Issues []*ReconciliationReportValidationIssue `json:"issues,omitempty"`

	// ReconciliationReport: Resource name of the new reconciliation report.
	// The format is `accounts/{account_id}`.
	ReconciliationReport *ReconciliationReport `json:"reconciliationReport,omitempty"`

	// SuccessfulRecordCount: The number of commission records that were
	// successfully saved.
	SuccessfulRecordCount int64 `json:"successfulRecordCount,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Issues") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Issues") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *CreateReconciliationReportResponse) MarshalJSON() ([]byte, error) {
	type NoMethod CreateReconciliationReportResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// DataIssueDetail: Details on a data issue in the listing.
type DataIssueDetail struct {
	// DataIssueSeverity: The severity of the data issue.
	//
	// Possible values:
	//   "DATA_ISSUE_SEVERITY_UNSPECIFIED" - The severity of the issue is
	// unknown.
	//   "ERROR" - The data issue will make the listing ineligible for
	// serving.
	//   "WARNING" - The listing will still be eligible for serving, but the
	// data issue may have an adverse effect on the content shown.
	//   "INFO" - The data issue is for informational purposes.
	DataIssueSeverity string `json:"dataIssueSeverity,omitempty"`

	// DataIssueType: The type of the data issue.
	//
	// Possible values:
	//   "FEED_DATA_ISSUE_UNSPECIFIED" - Not specified.
	//   "FEED_DATA_ISSUE_UNKNOWN" - The value is unknown in this version.
	//   "NO_DATA_ISSUE" - No data issues found.
	//   "DUPLICATE_ADDRESS" - The address is the same as another property
	// in the Hotel List Feed.
	//   "MISSING_PHYSICAL_STREET_ADDRESS" - The provided address appears to
	// contain a postal box instead of a physical street address.
	//   "MISSING_STREET_NAME" - The address does not appear to contain a
	// street name.
	//   "MISSING_STREET_NUMBER" - The address does not appear to contain a
	// street number.
	//   "MISSING_ADDRESS" - The address does not appear to contain a street
	// number, street name, or supported country code.
	//   "MISSING_COUNTRY" - An invalid but recognized country code was
	// provided.
	//   "INVALID_POSTAL_CODE" - The address contains an invalid postal
	// code.
	//   "INVALID_POSTAL_CODE_SUFFIX" - The address contains an invalid
	// postal code suffix.
	//   "UNEXPECTED_POSTAL_CODE_SUFFIX" - The address contains a postal
	// code suffix when unsupported by the country's postal code system.
	//   "UNEXPECTED_POSTAL_CODE" - The address contains a postal code when
	// unsupported by the country's postal code system.
	//   "INVALID_AMENITIES" - The name and value at
	// 'listing.content.attributes.attr' is either unsupported or has an
	// invalid value.
	//   "INVALID_EMAIL_ADDRESS" - The email at
	// 'listing.content.attributes.attr[name='email']' is not a valid email
	// address.
	//   "DUPLICATE_LATLONG" - The latitude/longitude pair is the same as
	// another property in the Hotel List Feed.
	//   "LATLONG_INCONSISTENT_WITH_ADDRESS" - The latitude/longitude pair
	// provided for the address is more than 500 meters away from the Google
	// latitude/longitude generated from the address.
	//   "MISSING_LATLONG" - A valid pair of latitude/longitude fields is
	// missing and Google latitude/longitude generation is disabled.
	//   "COULD_NOT_GEOCODE" - A valid pair of latitude/longitude fields is
	// missing and Google could not generate them from the address.
	//   "MISSING_HOTEL_NAME" - No hotel name is provided.
	//   "HOTEL_NAME_EMPTY" - An empty or whitespace only name is provided,
	// but no valid name.
	//   "INVALID_HOTEL_NAME" - An invalid name is provided, but no valid
	// name.
	//   "HOTEL_NAME_TOO_LONG" - The hotel name exceeds 200 characters.
	//   "PARSE_ERROR_IN_XML" - Google encountered an error while importing
	// your Hotel List Feed.
	//   "UNEXPECTED_ATTRIBUTE_IN_XML" - Google encountered an unknown error
	// while importing your Hotel List Feed.
	//   "DUPLICATE_PHONE_NUMBER" - The phone number you provided for this
	// property is the same as the phone number for another property. More
	// than one listing in the Hotel List Feed cannot have the same phone
	// number.
	//   "MISSING_PHONE_NUMBER" - No valid phone number for this property
	// found.
	//   "MISSING_VOICE_PHONE_NUMBER" - Only invalid or fax phone numbers
	// found.
	//   "INVALID_PHONE_NUMBER_FORMAT" - The phone number format is not
	// valid.
	//   "INVALID_PHONE_NUMBER" - The phone number is not valid.
	//   "INVALID_PHONE_NUMBER_COUNTRY_CODE" - The country code of the phone
	// number is not valid.
	//   "PHONE_NUMBER_TOO_LONG" - The phone number contains too many
	// digits.
	//   "PHONE_NUMBER_TOO_SHORT" - The phone number contains has too few
	// digits.
	//   "INVALID_WEBSITE_URL" - The specified
	// `content.attributes.attr[name='website']` element is not a valid URL.
	//   "ADWORDS_ATTRIBUTE_TOO_LONG" - The category or
	// `content.attributes.client_attr[name='hotel_brand']` element exceeds
	// 70 Unicode characters, and/or
	// `content.attributes.client_attr[name='custom_*']` exceeds 100 Unicode
	// characters.
	//   "FLAGGED_DUE_TO_SUSPICIOUS_METADATA" - Contact your account manager
	// for details.
	//   "NOT_ENOUGH_IMAGES_PROVIDED" - Vacation rental properties must have
	// at least five feed images. Eight or more images are strongly
	// recommended; having fewer than 8 may impact performance (such as
	// impressions and clicks).
	//   "IMAGE_PROCESSING_IN_PROGRESS" - The images for this vacation
	// rental property are still being processed.
	//   "CANNOT_FETCH_IMAGES" - The images for this property cannot be
	// fetched. Please check that the image URLs are valid (e.g. do not give
	// a 404 error) and that the domain hosting the image URLs does not
	// block crawling of these images in its robots.txt file or X-Robots-Tag
	// HTTP Header.
	//   "INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY" - The images provided for
	// this property do not meet Google's requirements due to dimensions,
	// size, or automated quality signals. Please ensure that the images are
	// less than 10 MB large, less than 4K pixels wide, and less than 4K
	// pixels tall. Please check additional guidance outlined at the
	// [Property listing image
	// requirements](/hotels/vacation-rentals/dev-guide/onboarding#property_l
	// isting_image_requirements)
	//   "MISSING_LANG_IN_RAW_LISTING" - Deprecated Issue Vacation rental
	// raw listing is missing a language field.
	//   "IS_HOTEL" - Vacation rental listing has been characterized as a
	// hotel and not a vacation rental.
	//   "MISSING_REQ_ATTR" - Vacation rental listing is missing a required
	// attribute.
	//   "MISSING_NAME" - Vacation rental listing is missing a name.
	//   "MISSING_LANG_IN_NAME" - Vacation rental listing name is missing a
	// language field.
	//   "VR_NAME_TOO_LONG" - Vacation rental listing name is too long.
	//   "NAME_AND_DESCRIPTION_ABUSE_VERIFIED" - Vacation rental listing's
	// name or description is verfied to contain content that violates
	// Google's content policy.
	//   "TEST_PROPERTY" - Vacation rental listing is a test property.
	//   "NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME" - Please use
	// NON_VR_ACCOMMODATION_TYPE instead.
	//   "NON_VR_ACCOMMODATION_TYPE" - Listing that is sent as a vacation
	// rental is suspected to be a non-vacation rental accommodation type,
	// such as a hotel, hostel, etc.
	//   "BRAND_NAME_TOO_LONG" - Vacation rental listing brand name is too
	// long.
	//   "MISSING_BRAND_NAME" - Vacation rental listing is missing a brand
	// name.
	//   "REVIEW_MISSING_VISIT_TIMESTAMP" - This listing has a review that
	// is missing a visit timestamp and the timestamp is required in the
	// listing's country. The review should include "servicedate" if using
	// XML markup or "contentReferenceTime" if using schema.org.
	//   "VR_ADDRESS_MISSING" - An address should be added to this listing.
	//   "VR_ADDRESS_INVALID" - v2 The provided address is invalid. Review
	// address requirements on the [dev
	// guide](/hotels/vacation-rentals/dev-guide/vr-attributes). Debugging
	// suggestions: 1. Confirm the address does not contain redundant
	// information such as the country in both addr1 and country_code. 2.
	// Use Google Maps to confirm if the address is formatted correctly for
	// its region. 3. Use a [plus code](https://plus.codes) if the address
	// continues to be invalid.
	//   "VR_ADDRESS_INCOMPLETE" - Deprecated: Replaced with more specifc
	// errors or VR_ADDRESS_INVALID. Google detected that the provided
	// address for this listing is incomplete. For example, it may be
	// missing a unit number.
	//   "VR_ADDRESS_INCOMPLETE_NO_STREET_NAME" - The provided address is
	// missing a street name.
	//   "VR_ADDRESS_INCOMPLETE_NO_STREET_NUMBER" - The provided address is
	// missing a street number.
	//   "VR_ADDRESS_INCOMPLETE_NO_UNIT_NUMBER" - The provided address is
	// missing a unit number.
	//   "VR_ADDRESS_LATLONG_MISMATCH" - The provided address and lat/long
	// data for this listing doesn't match.
	//   "INVALID_REVIEW_RATING" - Vacation rental listing has an invalid
	// review rating.
	//   "INVALID_CHECKIN_FORMAT" - Vacation rental listing has an invalid
	// check-in format.
	//   "INVALID_CHECKOUT_FORMAT" - Vacation rental listing has an invalid
	// check-out format.
	//   "INTERNAL_BLOCKLIST" - This listing is in an internal blocklist.
	// Contact your account manager for help.
	//   "VR_LIVE_ON_GOOGLE_INACTIVE_ERROR" - The "Live on Google" setting
	// for this Vacation Rental is set to false. Note: once "Live on Google"
	// is set to true, it will take a few days for this error to disappear.
	//   "VR_XML_FAILED_PARSING" - This listing's XML failed to parse.
	// Please fix the XML associated with this listing.
	//   "VR_ZIP_FILE_CORRUPT" - A listing that indicates the that feed ZIP
	// file is corrupt. Please ensure the ZIP file is valid.
	//   "VR_PENDING_INITIAL_PROCESSING" - Vacation rental listing is
	// undergoing initial processing.
	//   "VR_WEBSITE_LINK_ROBOTED" - Vacation rental listing has a website
	// link that is blocked by a robots.txt
	//   "VR_PENDING_WEBSITE_CRAWLING" - Vacation rental listing has a
	// website link that is still undergoing crawling.
	//   "VR_WEBSITE_LINK_WITH_CRAWLING_ERROR" - Vacation rental listing has
	// a website link with a crawling error.
	//   "VR_BRAND_MISSING_LANDING_PAGE" - The brand of this vacation rental
	// property doesn't have a landing page. Contact your account manager
	// for details.
	DataIssueType string `json:"dataIssueType,omitempty"`

	// IsSelfResolving: Whether or not the issue is self-resolving. If true,
	// the issue is expected to resolve itself. If false or not set, action
	// is needed to resolve the issue. Refer to documentation on the data
	// issue’s type for further information.
	IsSelfResolving bool `json:"isSelfResolving,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DataIssueSeverity")
	// to unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DataIssueSeverity") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *DataIssueDetail) MarshalJSON() ([]byte, error) {
	type NoMethod DataIssueDetail
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// Date: Represents a whole or partial calendar date, such as a
// birthday. The time of day and time zone are either specified
// elsewhere or are insignificant. The date is relative to the Gregorian
// Calendar. This can represent one of the following: * A full date,
// with non-zero year, month, and day values. * A month and day, with a
// zero year (for example, an anniversary). * A year on its own, with a
// zero month and a zero day. * A year and month, with a zero day (for
// example, a credit card expiration date). Related types: *
// google.type.TimeOfDay * google.type.DateTime *
// google.protobuf.Timestamp
type Date struct {
	// Day: Day of a month. Must be from 1 to 31 and valid for the year and
	// month, or 0 to specify a year by itself or a year and month where the
	// day isn't significant.
	Day int64 `json:"day,omitempty"`

	// Month: Month of a year. Must be from 1 to 12, or 0 to specify a year
	// without a month and day.
	Month int64 `json:"month,omitempty"`

	// Year: Year of the date. Must be from 1 to 9999, or 0 to specify a
	// date without a year.
	Year int64 `json:"year,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Day") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Day") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Date) MarshalJSON() ([]byte, error) {
	type NoMethod Date
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// DisplayNameDisapprovalReason: Disapproval reason of the display name
// in a specific language.
type DisplayNameDisapprovalReason struct {
	// DisapprovalReason: Disapproval reason.
	//
	// Possible values:
	//   "DISAPPROVAL_REASON_UNSPECIFIED" - Not specified.
	//   "PUNCTUATION" - The display name has bad formatting and/or contains
	// punctuation.
	//   "MARKETING_LANGUAGE" - The display name contains marketing
	// language.
	//   "LANDING_PAGE_NOT_MATCHED" - The display name does not match the
	// landing page.
	//   "NOT_BRAND_NAME" - The display name does not appear to be a brand.
	DisapprovalReason string `json:"disapprovalReason,omitempty"`

	// LanguageCode: Language of the disapproved display name.
	LanguageCode string `json:"languageCode,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DisapprovalReason")
	// to unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisapprovalReason") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *DisplayNameDisapprovalReason) MarshalJSON() ([]byte, error) {
	type NoMethod DisplayNameDisapprovalReason
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// Empty: A generic empty message that you can re-use to avoid defining
// duplicated empty messages in your APIs. A typical example is to use
// it as the request or the response type of an API method. For
// instance: service Foo { rpc Bar(google.protobuf.Empty) returns
// (google.protobuf.Empty); }
type Empty struct {
	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`
}

// FreeBookingLinksResult: **DEPRECATED:** Use
// `PropertyPerformanceResult` with `PropertyPerformanceReportService`
// instead. Represents a result from querying for free booking link
// stats for an account.
type FreeBookingLinksResult struct {
	// ClickCount: The total number of clicks that were recorded for this
	// result.
	ClickCount int64 `json:"clickCount,omitempty,string"`

	// Date: A date within the requested date range. Only present if `date`
	// is specified in `aggregateBy` in the request.
	Date *Date `json:"date,omitempty"`

	// DeviceType: The user’s device type. Only present if `deviceType` is
	// specified in `aggregateBy` in the request.
	//
	// Possible values:
	//   "DEVICE_UNSPECIFIED" - Not specified.
	//   "DEVICE_UNKNOWN" - The value is unknown in this version.
	//   "DESKTOP" - Computers.
	//   "MOBILE" - Mobile devices with full browsers.
	//   "TABLET" - Tablets with full browsers.
	DeviceType string `json:"deviceType,omitempty"`

	// PartnerHotelDisplayName: Partner's hotel name. Only present if
	// `partnerHotelDisplayName` is specified in `aggregateBy` in the
	// request.
	PartnerHotelDisplayName string `json:"partnerHotelDisplayName,omitempty"`

	// PartnerHotelId: Partner's hotel ID. Only present if `partnerHotelId`
	// is specified in `aggregateBy` in the request.
	PartnerHotelId string `json:"partnerHotelId,omitempty"`

	// UserRegionCode: ISO 3116 region code of the country/region of the
	// user. Only present if `userRegionCode` is specified in `aggregateBy`
	// in the request
	UserRegionCode string `json:"userRegionCode,omitempty"`

	// ForceSendFields is a list of field names (e.g. "ClickCount") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ClickCount") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *FreeBookingLinksResult) MarshalJSON() ([]byte, error) {
	type NoMethod FreeBookingLinksResult
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// HotelList: The properties in the Hotel Center account that can be
// managed with the Google Ads account.
type HotelList struct {
	// PartnerHotelIds: Hotel IDs.
	PartnerHotelIds []string `json:"partnerHotelIds,omitempty"`

	// ForceSendFields is a list of field names (e.g. "PartnerHotelIds") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PartnerHotelIds") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *HotelList) MarshalJSON() ([]byte, error) {
	type NoMethod HotelList
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// HotelPricePerItinerary: Hotel price for a given itinerary.
type HotelPricePerItinerary struct {
	// CheckinDate: Check-in date.
	CheckinDate *Date `json:"checkinDate,omitempty"`

	// CurrencyCode: Currency for `price`, `taxes`, and `fees`.
	CurrencyCode string `json:"currencyCode,omitempty"`

	// Fees: Fees for this itinerary.
	Fees float64 `json:"fees,omitempty"`

	// LengthOfStayDays: Number of nights for the itinerary.
	LengthOfStayDays int64 `json:"lengthOfStayDays,omitempty"`

	// Price: Hotel price for this itinerary.
	Price float64 `json:"price,omitempty"`

	// Taxes: Taxes for this itinerary.
	Taxes float64 `json:"taxes,omitempty"`

	// UpdateTime: Update timestamp for this hotel price.
	UpdateTime string `json:"updateTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "CheckinDate") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CheckinDate") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *HotelPricePerItinerary) MarshalJSON() ([]byte, error) {
	type NoMethod HotelPricePerItinerary
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *HotelPricePerItinerary) UnmarshalJSON(data []byte) error {
	type NoMethod HotelPricePerItinerary
	var s1 struct {
		Fees  gensupport.JSONFloat64 `json:"fees"`
		Price gensupport.JSONFloat64 `json:"price"`
		Taxes gensupport.JSONFloat64 `json:"taxes"`
		*NoMethod
	}
	s1.NoMethod = (*NoMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.Fees = float64(s1.Fees)
	s.Price = float64(s1.Price)
	s.Taxes = float64(s1.Taxes)
	return nil
}

// HotelView: A hotel view.
type HotelView struct {
	// DataIssueDetail: The type and severity of each data quality issue in
	// the feed. If your feed contains data issues, update the feed and
	// resubmit it. For more information, refer to this article.
	DataIssueDetail []*DataIssueDetail `json:"dataIssueDetail,omitempty"`

	// DataIssues: DEPRECATED. Indicates that the hotel has data quality
	// issues. The value of this field indicates the type of error. This has
	// been replaced with the data_issue_detail field. If your feed contains
	// data issues, update the feed and resubmit it. For more information,
	// refer to this article.
	//
	// Possible values:
	//   "FEED_DATA_ISSUE_UNSPECIFIED" - Not specified.
	//   "FEED_DATA_ISSUE_UNKNOWN" - The value is unknown in this version.
	//   "NO_DATA_ISSUE" - No data issues found.
	//   "DUPLICATE_ADDRESS" - The address is the same as another property
	// in the Hotel List Feed.
	//   "MISSING_PHYSICAL_STREET_ADDRESS" - The provided address appears to
	// contain a postal box instead of a physical street address.
	//   "MISSING_STREET_NAME" - The address does not appear to contain a
	// street name.
	//   "MISSING_STREET_NUMBER" - The address does not appear to contain a
	// street number.
	//   "MISSING_ADDRESS" - The address does not appear to contain a street
	// number, street name, or supported country code.
	//   "MISSING_COUNTRY" - An invalid but recognized country code was
	// provided.
	//   "INVALID_POSTAL_CODE" - The address contains an invalid postal
	// code.
	//   "INVALID_POSTAL_CODE_SUFFIX" - The address contains an invalid
	// postal code suffix.
	//   "UNEXPECTED_POSTAL_CODE_SUFFIX" - The address contains a postal
	// code suffix when unsupported by the country's postal code system.
	//   "UNEXPECTED_POSTAL_CODE" - The address contains a postal code when
	// unsupported by the country's postal code system.
	//   "INVALID_AMENITIES" - The name and value at
	// 'listing.content.attributes.attr' is either unsupported or has an
	// invalid value.
	//   "INVALID_EMAIL_ADDRESS" - The email at
	// 'listing.content.attributes.attr[name='email']' is not a valid email
	// address.
	//   "DUPLICATE_LATLONG" - The latitude/longitude pair is the same as
	// another property in the Hotel List Feed.
	//   "LATLONG_INCONSISTENT_WITH_ADDRESS" - The latitude/longitude pair
	// provided for the address is more than 500 meters away from the Google
	// latitude/longitude generated from the address.
	//   "MISSING_LATLONG" - A valid pair of latitude/longitude fields is
	// missing and Google latitude/longitude generation is disabled.
	//   "COULD_NOT_GEOCODE" - A valid pair of latitude/longitude fields is
	// missing and Google could not generate them from the address.
	//   "MISSING_HOTEL_NAME" - No hotel name is provided.
	//   "HOTEL_NAME_EMPTY" - An empty or whitespace only name is provided,
	// but no valid name.
	//   "INVALID_HOTEL_NAME" - An invalid name is provided, but no valid
	// name.
	//   "HOTEL_NAME_TOO_LONG" - The hotel name exceeds 200 characters.
	//   "PARSE_ERROR_IN_XML" - Google encountered an error while importing
	// your Hotel List Feed.
	//   "UNEXPECTED_ATTRIBUTE_IN_XML" - Google encountered an unknown error
	// while importing your Hotel List Feed.
	//   "DUPLICATE_PHONE_NUMBER" - The phone number you provided for this
	// property is the same as the phone number for another property. More
	// than one listing in the Hotel List Feed cannot have the same phone
	// number.
	//   "MISSING_PHONE_NUMBER" - No valid phone number for this property
	// found.
	//   "MISSING_VOICE_PHONE_NUMBER" - Only invalid or fax phone numbers
	// found.
	//   "INVALID_PHONE_NUMBER_FORMAT" - The phone number format is not
	// valid.
	//   "INVALID_PHONE_NUMBER" - The phone number is not valid.
	//   "INVALID_PHONE_NUMBER_COUNTRY_CODE" - The country code of the phone
	// number is not valid.
	//   "PHONE_NUMBER_TOO_LONG" - The phone number contains too many
	// digits.
	//   "PHONE_NUMBER_TOO_SHORT" - The phone number contains has too few
	// digits.
	//   "INVALID_WEBSITE_URL" - The specified
	// `content.attributes.attr[name='website']` element is not a valid URL.
	//   "ADWORDS_ATTRIBUTE_TOO_LONG" - The category or
	// `content.attributes.client_attr[name='hotel_brand']` element exceeds
	// 70 Unicode characters, and/or
	// `content.attributes.client_attr[name='custom_*']` exceeds 100 Unicode
	// characters.
	//   "FLAGGED_DUE_TO_SUSPICIOUS_METADATA" - Contact your account manager
	// for details.
	//   "NOT_ENOUGH_IMAGES_PROVIDED" - Vacation rental properties must have
	// at least five feed images. Eight or more images are strongly
	// recommended; having fewer than 8 may impact performance (such as
	// impressions and clicks).
	//   "IMAGE_PROCESSING_IN_PROGRESS" - The images for this vacation
	// rental property are still being processed.
	//   "CANNOT_FETCH_IMAGES" - The images for this property cannot be
	// fetched. Please check that the image URLs are valid (e.g. do not give
	// a 404 error) and that the domain hosting the image URLs does not
	// block crawling of these images in its robots.txt file or X-Robots-Tag
	// HTTP Header.
	//   "INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY" - The images provided for
	// this property do not meet Google's requirements due to dimensions,
	// size, or automated quality signals. Please ensure that the images are
	// less than 10 MB large, less than 4K pixels wide, and less than 4K
	// pixels tall. Please check additional guidance outlined at the
	// [Property listing image
	// requirements](/hotels/vacation-rentals/dev-guide/onboarding#property_l
	// isting_image_requirements)
	//   "MISSING_LANG_IN_RAW_LISTING" - Deprecated Issue Vacation rental
	// raw listing is missing a language field.
	//   "IS_HOTEL" - Vacation rental listing has been characterized as a
	// hotel and not a vacation rental.
	//   "MISSING_REQ_ATTR" - Vacation rental listing is missing a required
	// attribute.
	//   "MISSING_NAME" - Vacation rental listing is missing a name.
	//   "MISSING_LANG_IN_NAME" - Vacation rental listing name is missing a
	// language field.
	//   "VR_NAME_TOO_LONG" - Vacation rental listing name is too long.
	//   "NAME_AND_DESCRIPTION_ABUSE_VERIFIED" - Vacation rental listing's
	// name or description is verfied to contain content that violates
	// Google's content policy.
	//   "TEST_PROPERTY" - Vacation rental listing is a test property.
	//   "NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME" - Please use
	// NON_VR_ACCOMMODATION_TYPE instead.
	//   "NON_VR_ACCOMMODATION_TYPE" - Listing that is sent as a vacation
	// rental is suspected to be a non-vacation rental accommodation type,
	// such as a hotel, hostel, etc.
	//   "BRAND_NAME_TOO_LONG" - Vacation rental listing brand name is too
	// long.
	//   "MISSING_BRAND_NAME" - Vacation rental listing is missing a brand
	// name.
	//   "REVIEW_MISSING_VISIT_TIMESTAMP" - This listing has a review that
	// is missing a visit timestamp and the timestamp is required in the
	// listing's country. The review should include "servicedate" if using
	// XML markup or "contentReferenceTime" if using schema.org.
	//   "VR_ADDRESS_MISSING" - An address should be added to this listing.
	//   "VR_ADDRESS_INVALID" - v2 The provided address is invalid. Review
	// address requirements on the [dev
	// guide](/hotels/vacation-rentals/dev-guide/vr-attributes). Debugging
	// suggestions: 1. Confirm the address does not contain redundant
	// information such as the country in both addr1 and country_code. 2.
	// Use Google Maps to confirm if the address is formatted correctly for
	// its region. 3. Use a [plus code](https://plus.codes) if the address
	// continues to be invalid.
	//   "VR_ADDRESS_INCOMPLETE" - Deprecated: Replaced with more specifc
	// errors or VR_ADDRESS_INVALID. Google detected that the provided
	// address for this listing is incomplete. For example, it may be
	// missing a unit number.
	//   "VR_ADDRESS_INCOMPLETE_NO_STREET_NAME" - The provided address is
	// missing a street name.
	//   "VR_ADDRESS_INCOMPLETE_NO_STREET_NUMBER" - The provided address is
	// missing a street number.
	//   "VR_ADDRESS_INCOMPLETE_NO_UNIT_NUMBER" - The provided address is
	// missing a unit number.
	//   "VR_ADDRESS_LATLONG_MISMATCH" - The provided address and lat/long
	// data for this listing doesn't match.
	//   "INVALID_REVIEW_RATING" - Vacation rental listing has an invalid
	// review rating.
	//   "INVALID_CHECKIN_FORMAT" - Vacation rental listing has an invalid
	// check-in format.
	//   "INVALID_CHECKOUT_FORMAT" - Vacation rental listing has an invalid
	// check-out format.
	//   "INTERNAL_BLOCKLIST" - This listing is in an internal blocklist.
	// Contact your account manager for help.
	//   "VR_LIVE_ON_GOOGLE_INACTIVE_ERROR" - The "Live on Google" setting
	// for this Vacation Rental is set to false. Note: once "Live on Google"
	// is set to true, it will take a few days for this error to disappear.
	//   "VR_XML_FAILED_PARSING" - This listing's XML failed to parse.
	// Please fix the XML associated with this listing.
	//   "VR_ZIP_FILE_CORRUPT" - A listing that indicates the that feed ZIP
	// file is corrupt. Please ensure the ZIP file is valid.
	//   "VR_PENDING_INITIAL_PROCESSING" - Vacation rental listing is
	// undergoing initial processing.
	//   "VR_WEBSITE_LINK_ROBOTED" - Vacation rental listing has a website
	// link that is blocked by a robots.txt
	//   "VR_PENDING_WEBSITE_CRAWLING" - Vacation rental listing has a
	// website link that is still undergoing crawling.
	//   "VR_WEBSITE_LINK_WITH_CRAWLING_ERROR" - Vacation rental listing has
	// a website link with a crawling error.
	//   "VR_BRAND_MISSING_LANDING_PAGE" - The brand of this vacation rental
	// property doesn't have a landing page. Contact your account manager
	// for details.
	DataIssues []string `json:"dataIssues,omitempty"`

	// GoogleClusterId: The Google Maps identifier for the hotel.
	GoogleClusterId uint64 `json:"googleClusterId,omitempty,string"`

	// GoogleHotelDisplayName: Google's hotel name.
	GoogleHotelDisplayName string `json:"googleHotelDisplayName,omitempty"`

	// GoogleHotelId: Google's canonical ID for the hotel.
	GoogleHotelId uint64 `json:"googleHotelId,omitempty,string"`

	// LiveOnGoogle: Optional. Whether the hotel appears in Google's hotel
	// booking links. Declaration & behavior to get detection of
	// presence/absence in JSON conversion.
	LiveOnGoogle bool `json:"liveOnGoogle,omitempty"`

	// MatchFailureReasons: The reasons why a hotel failed to match to a
	// property on Maps.
	MatchFailureReasons []string `json:"matchFailureReasons,omitempty"`

	// MatchStatus: Current matching status of the hotel.
	//
	// Possible values:
	//   "MATCH_STATUS_UNSPECIFIED" - Not specified.
	//   "MATCH_STATUS_UNKNOWN" - The value is unknown in this version.
	//   "NOT_MATCHED" - This hotel does not correspond to a hotel on Google
	// Maps.
	//   "MATCHED" - This hotel corresponds to a hotel on Google Maps.
	//   "MAP_OVERLAP" - More than one of your hotels match this hotel on
	// Google Maps.
	MatchStatus string `json:"matchStatus,omitempty"`

	// OverclusteredPartnerHotelIds: Other hotels with which the hotel is
	// overclustered. If your feed contains overclustered hotels, update the
	// feed and resubmit it. To do this, you can use the manual match tool.
	OverclusteredPartnerHotelIds []string `json:"overclusteredPartnerHotelIds,omitempty"`

	// PartnerHotelDisplayName: Partner's hotel name.
	PartnerHotelDisplayName string `json:"partnerHotelDisplayName,omitempty"`

	// PartnerHotelId: The unique ID of the hotel that the partner provides
	// in their Hotel List Feed.
	PartnerHotelId string `json:"partnerHotelId,omitempty"`

	// PrimaryOverclusteredPartnerHotelId: The primary hotel in the
	// overclustered set.
	PrimaryOverclusteredPartnerHotelId string `json:"primaryOverclusteredPartnerHotelId,omitempty"`

	// PropertyDetails: Optional. A URL to the property on Google. Only
	// available for properties that are listed.
	PropertyDetails string `json:"propertyDetails,omitempty"`

	// ForceSendFields is a list of field names (e.g. "DataIssueDetail") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DataIssueDetail") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *HotelView) MarshalJSON() ([]byte, error) {
	type NoMethod HotelView
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// Icon: Information about a partner's icon.
type Icon struct {
	// DisapprovalReasons: Output only. The icon's disapproval reason(s).
	// Only applies to icons with `REJECTED` state.
	//
	// Possible values:
	//   "IMAGE_DISAPPROVAL_REASON_UNSPECIFIED" - Not specified.
	//   "NOT_LIKE_SITE" - Icon image does not match the favicon or artwork
	// on the advertiser’s final URL.
	//   "OFFENSIVE" - Icon image contains offensive content.
	//   "LOW_QUALITY" - Icon image is low quality.
	//   "ANIMATED" - Icon image is animated.
	//   "BAD_BACKGROUND" - Icon image does not have a transparent or
	// non-white background.
	//   "TEXT_TOO_SMALL" - Icon image contains text that is too small.
	DisapprovalReasons []string `json:"disapprovalReasons,omitempty"`

	// IconUri: Output only. The approved icon's Google-hosted URI. Only
	// applies to icons with `APPROVED` state.
	IconUri string `json:"iconUri,omitempty"`

	// ImageData: Required. Input only. The icon contents, which must be in
	// PNG format, or convertible to PNG.
	ImageData string `json:"imageData,omitempty"`

	// Name: Required. Output only. The resource name for the icon in the
	// format `accounts/{account_id}/icons/{icon_id}`. Google generates the
	// `icon_id` during the `create` operation. Use the `icon_id` to
	// associate the icon with a brand using the accounts.brands
	// (/hotels/hotel-prices/api-reference/rest/v3/accounts.brands#resource:-
	// brand) API.
	Name string `json:"name,omitempty"`

	// Reference: Optional. Value for tracking the icon. It could be the
	// primary key to your icon in your system, or the icon's filename.
	// Google does not use this value.
	Reference string `json:"reference,omitempty"`

	// State: Output only. The icon's current state.
	//
	// Possible values:
	//   "STATE_UNSPECIFIED" - Default value.
	//   "NEW" - Google has received the icon and is reviewing its contents.
	//   "APPROVED" - The icon is approved and is ready for public display.
	// You can link APPROVED icons to brands.
	//   "REJECTED" - The icon is rejected. Google won't display this icon.
	State string `json:"state,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "DisapprovalReasons")
	// to unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "DisapprovalReasons") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Icon) MarshalJSON() ([]byte, error) {
	type NoMethod Icon
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// Image: A single image in a VR Listing. Title and gallery URL are
// stored per locale. NEXT ID: 4
type Image struct {
	// GalleryUri: URL that is deeplink to the image in a gallery (or a
	// webpage).
	GalleryUri []*LocalizedText `json:"galleryUri,omitempty"`

	// Title: Title of the image.
	Title []*LocalizedText `json:"title,omitempty"`

	// Uri: URL that points to the binary image content directly.
	Uri string `json:"uri,omitempty"`

	// ForceSendFields is a list of field names (e.g. "GalleryUri") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "GalleryUri") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Image) MarshalJSON() ([]byte, error) {
	type NoMethod Image
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// Key: Key of a result.
type Key struct {
	// AdvanceBookingWindow: The number of days in advance the user wants to
	// book the itinerary. If `advanceBookingWindow` is not a value of the
	// `aggregateBy` parameter in the request call, then the
	// `advanceBookingWindow` field is not returned in the `Key`.
	AdvanceBookingWindow int64 `json:"advanceBookingWindow,omitempty"`

	// CheckinDate: The check-in date of the itinerary. If `checkinDate` is
	// not a value of the `aggregateBy` parameter in the request call, then
	// the `checkinDate` field is not returned in the `Key`.
	CheckinDate *Date `json:"checkinDate,omitempty"`

	// Date: The date for which you are requesting metrics. If `date` is not
	// a value of the `aggregateBy` parameter in the request call, then the
	// `date` field is not returned in the `Key`.
	Date *Date `json:"date,omitempty"`

	// DeviceType: The user’s device type. If `deviceType` is not a value
	// of the `aggregateBy` parameter in the request call, then the
	// `deviceType` field is not returned in the `Key`.
	//
	// Possible values:
	//   "DEVICE_UNSPECIFIED" - Not specified.
	//   "DEVICE_UNKNOWN" - The value is unknown in this version.
	//   "DESKTOP" - Computers.
	//   "MOBILE" - Mobile devices with full browsers.
	//   "TABLET" - Tablets with full browsers.
	DeviceType string `json:"deviceType,omitempty"`

	// HotelRegionCode: CLDR region code of the country/region of the hotel.
	// If `hotelRegionCode` is not a value of the `aggregateBy` parameter in
	// the request call, then the `hotelRegionCode` field is not returned in
	// the `Key`.
	HotelRegionCode string `json:"hotelRegionCode,omitempty"`

	// LengthOfStayDays: The number of nights for the itinerary. If
	// `lengthOfStayDays` is not a value of the `aggregateBy` parameter in
	// the request call, then the `lengthOfStayDays` field is not returned
	// in the `Key`.
	LengthOfStayDays int64 `json:"lengthOfStayDays,omitempty"`

	// Occupancy: The total occupancy of the itinerary. If `occupancy` is
	// not a value of the `aggregateBy` parameter in the request call, then
	// the `occupancy` field is not returned in the `Key`.
	Occupancy int64 `json:"occupancy,omitempty"`

	// PartnerHotelId: Partner's hotel ID. If `partnerHotelId` is not a
	// value of the `aggregateBy` parameter in the request call, then the
	// `partnerHotelId` field is not returned in the `Key`.
	PartnerHotelId string `json:"partnerHotelId,omitempty"`

	// UserRegionCode: ISO 3116 region code of the country/region of the
	// user. If `userRegionCode` is not a value of the `aggregateBy`
	// parameter in the request call, then the `userRegionCode` field is not
	// returned in the `Key`.
	UserRegionCode string `json:"userRegionCode,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "AdvanceBookingWindow") to unconditionally include in API requests.
	// By default, fields with empty or default values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AdvanceBookingWindow") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *Key) MarshalJSON() ([]byte, error) {
	type NoMethod Key
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// LatLng: An object that represents a latitude/longitude pair. This is
// expressed as a pair of doubles to represent degrees latitude and
// degrees longitude. Unless specified otherwise, this object must
// conform to the WGS84 standard. Values must be within normalized
// ranges.
type LatLng struct {
	// Latitude: The latitude in degrees. It must be in the range [-90.0,
	// +90.0].
	Latitude float64 `json:"latitude,omitempty"`

	// Longitude: The longitude in degrees. It must be in the range [-180.0,
	// +180.0].
	Longitude float64 `json:"longitude,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Latitude") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Latitude") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LatLng) MarshalJSON() ([]byte, error) {
	type NoMethod LatLng
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *LatLng) UnmarshalJSON(data []byte) error {
	type NoMethod LatLng
	var s1 struct {
		Latitude  gensupport.JSONFloat64 `json:"latitude"`
		Longitude gensupport.JSONFloat64 `json:"longitude"`
		*NoMethod
	}
	s1.NoMethod = (*NoMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.Latitude = float64(s1.Latitude)
	s.Longitude = float64(s1.Longitude)
	return nil
}

// ListAccountLinksResponse: Response message for
// AccountLinkService.ListAccountLinks.
type ListAccountLinksResponse struct {
	// AccountLinks: A list of all account links associated with the Hotel
	// Center account being queried.
	AccountLinks []*AccountLink `json:"accountLinks,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "AccountLinks") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AccountLinks") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListAccountLinksResponse) MarshalJSON() ([]byte, error) {
	type NoMethod ListAccountLinksResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// ListBrandsResponse: Response message for BrandService.ListBrands.
type ListBrandsResponse struct {
	// Brands: A list of all brands associated with the Hotel Center account
	// being queried.
	Brands []*Brand `json:"brands,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Brands") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Brands") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListBrandsResponse) MarshalJSON() ([]byte, error) {
	type NoMethod ListBrandsResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// ListHotelViewsResponse: Response message for
// HotelViewService.ListHotelViews.
type ListHotelViewsResponse struct {
	// HotelViews: The list of rows that match the query.
	HotelViews []*HotelView `json:"hotelViews,omitempty"`

	// NextPageToken: Pagination token used to retrieve the next page of
	// results.
	NextPageToken string `json:"nextPageToken,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "HotelViews") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HotelViews") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListHotelViewsResponse) MarshalJSON() ([]byte, error) {
	type NoMethod ListHotelViewsResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// ListIconsResponse: Response message for IconService.ListIcons.
type ListIconsResponse struct {
	// Icons: A list of all icons associated with the queried partner
	// account.
	Icons []*Icon `json:"icons,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Icons") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Icons") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ListIconsResponse) MarshalJSON() ([]byte, error) {
	type NoMethod ListIconsResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// ListPriceAccuracyViewsResponse: Response message for
// PriceAccuracyViewService.ListPriceAccuracyViews.
type ListPriceAccuracyViewsResponse struct {
	// PriceAccuracyViews: The list of rows that match the query.
	PriceAccuracyViews []*PriceAccuracyView `json:"priceAccuracyViews,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "PriceAccuracyViews")
	// to unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PriceAccuracyViews") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListPriceAccuracyViewsResponse) MarshalJSON() ([]byte, error) {
	type NoMethod ListPriceAccuracyViewsResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// ListPriceCoverageViewsResponse: Response message for
// PriceCoverageViewService.ListPriceCoverageViews.
type ListPriceCoverageViewsResponse struct {
	// PriceCoverageViews: Hotel price coverage stats.
	PriceCoverageViews []*PriceCoverageView `json:"priceCoverageViews,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "PriceCoverageViews")
	// to unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "PriceCoverageViews") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListPriceCoverageViewsResponse) MarshalJSON() ([]byte, error) {
	type NoMethod ListPriceCoverageViewsResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// ListReconciliationReportsResponse: Response message for
// ReconciliationReportService.ListReconciliationReports.
type ListReconciliationReportsResponse struct {
	// ReconciliationReports: The list of names of reconciliation reports.
	// Note that the `contents` and `fileName` fields of each
	// `ReconciliationReport` object are not returned by this call.
	ReconciliationReports []*ReconciliationReport `json:"reconciliationReports,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g.
	// "ReconciliationReports") to unconditionally include in API requests.
	// By default, fields with empty or default values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ReconciliationReports") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *ListReconciliationReportsResponse) MarshalJSON() ([]byte, error) {
	type NoMethod ListReconciliationReportsResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// LocalizedText: Localized variant of a text in a particular language.
type LocalizedText struct {
	// LanguageCode: The text's BCP-47 language code, such as "en-US" or
	// "sr-Latn". For more information, see
	// http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
	LanguageCode string `json:"languageCode,omitempty"`

	// Text: Localized string in the language corresponding to language_code
	// below.
	Text string `json:"text,omitempty"`

	// ForceSendFields is a list of field names (e.g. "LanguageCode") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "LanguageCode") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *LocalizedText) MarshalJSON() ([]byte, error) {
	type NoMethod LocalizedText
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// MissedParticipationCountDetails: Missed participation count broken
// down by reason.
type MissedParticipationCountDetails struct {
	// HotelSuspendedCount: The total number of missed participations due to
	// one or more of your hotels being suspended due to price accuracy
	// violations.
	HotelSuspendedCount int64 `json:"hotelSuspendedCount,omitempty,string"`

	// NoAvailabilityCount: The total number of missed participation due to
	// the hotel/itinerary combination being unavailable, or the traveler
	// was ineligible for the rates. To participate in these auctions, you
	// may need to provide more pricing information.
	NoAvailabilityCount int64 `json:"noAvailabilityCount,omitempty,string"`

	// NoLandingPageCount: No landing page matched the user.
	NoLandingPageCount int64 `json:"noLandingPageCount,omitempty,string"`

	// NoPriceCount: The total number of missed participations due to a
	// price not being offered for the requested itinerary.
	NoPriceCount int64 `json:"noPriceCount,omitempty,string"`

	// NoPriceCountDetails: The reasons that contributed to the no price
	// count (for example, live pricing not available) and the total count
	// for each reason.
	NoPriceCountDetails *NoPriceCountDetails `json:"noPriceCountDetails,omitempty"`

	// NoTaxBreakdownCount: The total number of missed participation due to
	// one or more of your hotels not specifying taxes and fees separately.
	NoTaxBreakdownCount int64 `json:"noTaxBreakdownCount,omitempty,string"`

	// OtherReasonCount: Hotel did not participate for an unknown reason.
	OtherReasonCount int64 `json:"otherReasonCount,omitempty,string"`

	// PriceMissingCount: The total number of missed participations due to
	// either a price not being present in Google's cache or failing to
	// successfully respond to live pricing. Comprised of the following: *
	// Bandwidth depleted * Cache rate missing * Itinerary blocked * Live
	// pricing not set up * Live pricing timeout * Live pricing error
	PriceMissingCount int64 `json:"priceMissingCount,omitempty,string"`

	// PriceMissingCountDetails: The reasons that contributed to the price
	// missing count.
	PriceMissingCountDetails *PriceMissingCountDetails `json:"priceMissingCountDetails,omitempty"`

	// PriceProblemCount: The total number of missed participation due to an
	// issue with the accuracy of the price provided for the itinerary.
	// Comprised of the following: * Hotel suspended * Price unusually high
	// * Price unusually low * Taxes and feeds missing
	PriceProblemCount int64 `json:"priceProblemCount,omitempty,string"`

	// PriceProblemCountDetails: The reasons that contributed to the price
	// problem count.
	PriceProblemCountDetails *PriceProblemCountDetails `json:"priceProblemCountDetails,omitempty"`

	// PriceUnavailableCount: The total number of missed participation due
	// to price listed as unavailable (-1) for the requested itinerary.
	// Comprised of the following: * Price unavailable * Participation not
	// likely * Other
	PriceUnavailableCount int64 `json:"priceUnavailableCount,omitempty,string"`

	// PriceUnavailableCountDetails: The reasons that contributed to the
	// price unavailable count.
	PriceUnavailableCountDetails *PriceUnavailableCountDetails `json:"priceUnavailableCountDetails,omitempty"`

	// ForceSendFields is a list of field names (e.g. "HotelSuspendedCount")
	// to unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HotelSuspendedCount") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *MissedParticipationCountDetails) MarshalJSON() ([]byte, error) {
	type NoMethod MissedParticipationCountDetails
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// NoPriceCountDetails: The reasons that contributed to the no price
// count and the total count for each reason.
type NoPriceCountDetails struct {
	// LivePricingConfigIssueCount: The total number of missed participation
	// due to live pricing not being triggered for any of the following
	// reasons: * You didn't have live pricing configured for these
	// searches. * You restricted Google from accessing the hotel itinerary
	// in question.
	LivePricingConfigIssueCount int64 `json:"livePricingConfigIssueCount,omitempty,string"`

	// LivePricingNotAvailableCount: The total number of missed
	// participation due to live pricing being unavailable. Live pricing
	// will not be triggered for certain default itineraries or UIs. In this
	// scenario, partners will need a cached price to participate.
	LivePricingNotAvailableCount int64 `json:"livePricingNotAvailableCount,omitempty,string"`

	// LivePricingNotTriggeredCount: The total number of missed
	// participation due to live pricing not being triggered for any of the
	// following reasons: * You didn't set a bid. * You didn't have a valid
	// landing page. * There weren't enough prices in the cache.
	LivePricingNotTriggeredCount int64 `json:"livePricingNotTriggeredCount,omitempty,string"`

	// LivePricingOtherReasonCount: The number of missed participations due
	// to other issues with live pricing.
	LivePricingOtherReasonCount int64 `json:"livePricingOtherReasonCount,omitempty,string"`

	// LivePricingTechnicalIssueCount: The total number of missed
	// participation due to technical issues with live pricing for any of
	// the following reasons: * You didn’t respond quickly enough and
	// exceeded the response deadline (around 4000 milliseconds). * You
	// returned an error. * Your response was malformed.
	LivePricingTechnicalIssueCount int64 `json:"livePricingTechnicalIssueCount,omitempty,string"`

	// ForceSendFields is a list of field names (e.g.
	// "LivePricingConfigIssueCount") to unconditionally include in API
	// requests. By default, fields with empty or default values are omitted
	// from API requests. However, any non-pointer, non-interface field
	// appearing in ForceSendFields will be sent to the server regardless of
	// whether the field is empty or not. This may be used to include empty
	// fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g.
	// "LivePricingConfigIssueCount") to include in API requests with the
	// JSON null value. By default, fields with empty values are omitted
	// from API requests. However, any field with an empty value appearing
	// in NullFields will be sent to the server as null. It is an error if a
	// field in this list has a non-empty value. This may be used to include
	// null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *NoPriceCountDetails) MarshalJSON() ([]byte, error) {
	type NoMethod NoPriceCountDetails
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// ParsedListing: A parsed listing
type ParsedListing struct {
	// Brand: If not empty, it indicates that this listing belongs to a
	// brand of the feed.
	Brand string `json:"brand,omitempty"`

	// Category: The partner provided category (accommodation type) of the
	// property.
	Category []*LocalizedText `json:"category,omitempty"`

	// DataIssueDetail: Data issues about this listing
	DataIssueDetail []*DataIssueDetail `json:"dataIssueDetail,omitempty"`

	// Description: Description of the property.
	Description []*LocalizedText `json:"description,omitempty"`

	// Image: Images associated with this listing, localized.
	Image []*Image `json:"image,omitempty"`

	// ImprecisionRadiusMeters: Represents the accuracy of the location. The
	// listing can be anywhere within the defined circular area.
	ImprecisionRadiusMeters int64 `json:"imprecisionRadiusMeters,omitempty"`

	// IsServed: Whether the listing can be served based on non image data
	// alone.
	IsServed bool `json:"isServed,omitempty"`

	// ListingName: List of localized names.
	ListingName []*LocalizedText `json:"listingName,omitempty"`

	// Location: Location of listing using latitude and longitude (degrees).
	Location *LatLng `json:"location,omitempty"`

	// PartnerListId: The list ID on partner LEC feed, provided by partner.
	PartnerListId string `json:"partnerListId,omitempty"`

	// RegionCode: The country code where the listing is located.
	RegionCode string `json:"regionCode,omitempty"`

	// Review: Reviews associated with this listing. Each review has a
	// single language attached to it.
	Review []*Review `json:"review,omitempty"`

	// UnitAttributes: VR List attribute.
	UnitAttributes map[string]string `json:"unitAttributes,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Brand") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Brand") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ParsedListing) MarshalJSON() ([]byte, error) {
	type NoMethod ParsedListing
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// ParticipationResult: Represents a result from querying for
// participation stats for an account.
type ParticipationResult struct {
	// Key: Key of the result.
	Key *Key `json:"key,omitempty"`

	// MissedParticipationCount: The total number of opportunities **not**
	// eligible for the Google Ads auction process. Comprised of the
	// following: * Landing page missing * Price missing * Price problem *
	// Price unavailable * Other
	MissedParticipationCount int64 `json:"missedParticipationCount,omitempty,string"`

	// MissedParticipationCountDetails: The reasons that contributed to the
	// missed participation count (for example, no availability) and a total
	// count for each reason.
	MissedParticipationCountDetails *MissedParticipationCountDetails `json:"missedParticipationCountDetails,omitempty"`

	// OpportunityCount: For a specific hotel, the total number of
	// opportunities that were available. Opportunities are the total number
	// of instances when a hotel ad could have been displayed to a user.
	OpportunityCount int64 `json:"opportunityCount,omitempty,string"`

	// ParticipationCount: The total number of opportunities for which you
	// were eligible to enter in the Google Ads auction process.
	ParticipationCount int64 `json:"participationCount,omitempty,string"`

	// ParticipationPercent: The percentage rate of participation where the
	// number of successfully participated opportunities is divided by the
	// total number of opportunities. For example, if a property was
	// eligible to enter the Google Ads auction 90 times out of 100
	// opportunities, the participation rate is 90%.
	ParticipationPercent float64 `json:"participationPercent,omitempty"`

	// PartnerHotelDisplayName: Partner's hotel display name. This field is
	// only populated when the result is aggregated by `partnerHotelId`.
	PartnerHotelDisplayName string `json:"partnerHotelDisplayName,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Key") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Key") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ParticipationResult) MarshalJSON() ([]byte, error) {
	type NoMethod ParticipationResult
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *ParticipationResult) UnmarshalJSON(data []byte) error {
	type NoMethod ParticipationResult
	var s1 struct {
		ParticipationPercent gensupport.JSONFloat64 `json:"participationPercent"`
		*NoMethod
	}
	s1.NoMethod = (*NoMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.ParticipationPercent = float64(s1.ParticipationPercent)
	return nil
}

// PriceAccuracyRow: A price accuracy row.
type PriceAccuracyRow struct {
	// AdultOccupancy: The number of adults in the occupancy details of the
	// validation query.
	AdultOccupancy int64 `json:"adultOccupancy,omitempty"`

	// AffectsScore: True if this row affects the overall price accuracy
	// score.
	AffectsScore bool `json:"affectsScore,omitempty"`

	// CachedPriceRecord: Price as advertised.
	CachedPriceRecord *PriceRecord `json:"cachedPriceRecord,omitempty"`

	// CheckinDate: Check-in date.
	CheckinDate *Date `json:"checkinDate,omitempty"`

	// ChildOccupancy: The number of children in the occupancy details of
	// the validation query.
	ChildOccupancy int64 `json:"childOccupancy,omitempty"`

	// CorrectionTime: Time at which an incorrect price is updated to a
	// correct price.
	CorrectionTime string `json:"correctionTime,omitempty"`

	// DeviceType: The user's device type.
	//
	// Possible values:
	//   "DEVICE_UNSPECIFIED" - Not specified.
	//   "DEVICE_UNKNOWN" - The value is unknown in this version.
	//   "DESKTOP" - Computers.
	//   "MOBILE" - Mobile devices with full browsers.
	//   "TABLET" - Tablets with full browsers.
	DeviceType string `json:"deviceType,omitempty"`

	// FetchedPriceRecord: Price as read from the partner website.
	FetchedPriceRecord *PriceRecord `json:"fetchedPriceRecord,omitempty"`

	// FinalDomain: The domain of the final page from which prices are read.
	FinalDomain string `json:"finalDomain,omitempty"`

	// Hotel: Partner-defined hotel ID.
	Hotel string `json:"hotel,omitempty"`

	// HotelCountryCode: The country of the hotel (based on address).
	HotelCountryCode string `json:"hotelCountryCode,omitempty"`

	// LengthOfStayDays: Length of stay.
	LengthOfStayDays int64 `json:"lengthOfStayDays,omitempty"`

	// MismatchReason: The reason why the fetched price didn't match the
	// cached price.
	//
	// Possible values:
	//   "MISMATCH_REASON_UNSPECIFIED" - Not specified.
	//   "MISMATCH_REASON_UNKNOWN" - The value is unknown in this version.
	//   "TAX_MISMATCH" - Tax mismatch.
	//   "ROOM_UNAVAILABLE" - Room unavailable.
	//   "SITE_ERROR" - Site error.
	//   "PRICE_FEED_DELAYED" - Price feed delayed.
	//   "DISCOUNT_MISSING" - Discount missing.
	//   "INCORRECT_DISCOUNT_VALUE" - Incorrect discount value.
	//   "WRONG_ITINERARY" - Wrong itinerary.
	MismatchReason string `json:"mismatchReason,omitempty"`

	// RateRuleId: The rate rule of the advertised price for non-public
	// rates.
	RateRuleId string `json:"rateRuleId,omitempty"`

	// SignalSource: Source of the price accuracy signal.
	//
	// Possible values:
	//   "SIGNAL_SOURCE_UNSPECIFIED" - Not specified.
	//   "SIGNAL_SOURCE_UNKNOWN" - The value is unknown in this version.
	//   "FETCHED" - The price is read directly from the partner's website.
	//   "PIXEL" - The price is provided by the partner via a price accuracy
	// pixel.
	SignalSource string `json:"signalSource,omitempty"`

	// Url: Initial URL visited on the partner website.
	Url string `json:"url,omitempty"`

	// UserRegionCode: The user's region.
	UserRegionCode string `json:"userRegionCode,omitempty"`

	// ForceSendFields is a list of field names (e.g. "AdultOccupancy") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AdultOccupancy") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *PriceAccuracyRow) MarshalJSON() ([]byte, error) {
	type NoMethod PriceAccuracyRow
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// PriceAccuracyView: A price accuracy view. Covers the price accuracy
// reports functionality in pre-v3.0 API versions. For more information,
// refer to Price Accuracy report
// (https://support.google.com/hotelprices/answer/6318506).
type PriceAccuracyView struct {
	// Name: Resource name should be in the format
	// `accounts/{account_id}/priceAccuracyViews/{report_date}`.
	Name string `json:"name,omitempty"`

	// Results: The list of rows that match the query.
	Results []*PriceAccuracyRow `json:"results,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Name") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Name") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PriceAccuracyView) MarshalJSON() ([]byte, error) {
	type NoMethod PriceAccuracyView
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// PriceCoverageBucket: Coverage stats for one combination of advance
// booking window and length of stay.
type PriceCoverageBucket struct {
	// AdvanceBookingWindowRange: Advance booking window range.
	//
	// Possible values:
	//   "ADVANCE_BOOKING_WINDOW_RANGE_UNSPECIFIED" - Not specified.
	//   "ADVANCE_BOOKING_WINDOW_RANGE_UNKNOWN" - The value is unknown in
	// this version.
	//   "DAYS_0_TO_30" - Represents advance booking window between 0 and 30
	// days.
	//   "DAYS_31_TO_60" - Represents advance booking window between 31 and
	// 60 days.
	//   "DAYS_61_TO_90" - Represents advance booking window between 61 and
	// 90 days.
	//   "DAYS_91_TO_120" - Represents advance booking window between 91 and
	// 120 days.
	//   "DAYS_121_TO_150" - Represents advance booking window between 121
	// and 150 days.
	//   "DAYS_151_TO_180" - Represents advance booking window between 151
	// and 180 days.
	//   "DAYS_181_TO_210" - Represents advance booking window between 181
	// and 210 days.
	//   "DAYS_211_TO_240" - Represents advance booking window between 211
	// and 240 days.
	//   "DAYS_241_TO_270" - Represents advance booking window between 241
	// and 270 days.
	//   "DAYS_271_TO_300" - Represents advance booking window between 271
	// and 300 days.
	//   "DAYS_301_TO_330" - Represents advance booking window between 301
	// and 330 days.
	AdvanceBookingWindowRange string `json:"advanceBookingWindowRange,omitempty"`

	// AvailablePriceCount: Number of prices for this advance booking window
	// bucket and length of stay bucket.
	AvailablePriceCount int64 `json:"availablePriceCount,omitempty,string"`

	// LengthOfStayRange: Length of stay range.
	//
	// Possible values:
	//   "LENGTH_OF_STAY_RANGE_UNSPECIFIED" - Not specified.
	//   "LENGTH_OF_STAY_RANGE_UNKNOWN" - The value is unknown in this
	// version.
	//   "LENGTH_OF_STAY_1_TO_7" - Represents length of stay from 1 to 7
	// nights.
	//   "LENGTH_OF_STAY_8_TO_14" - Represents length of stay from 8 to 14
	// nights.
	//   "LENGTH_OF_STAY_15_TO_30" - Represents length of stay from 15 to 30
	// nights.
	LengthOfStayRange string `json:"lengthOfStayRange,omitempty"`

	// PriceCoveragePercent: The percent of itineraries for which you have
	// coverage for this advance booking window bucket and length of stay
	// bucket.
	PriceCoveragePercent float64 `json:"priceCoveragePercent,omitempty"`

	// ForceSendFields is a list of field names (e.g.
	// "AdvanceBookingWindowRange") to unconditionally include in API
	// requests. By default, fields with empty or default values are omitted
	// from API requests. However, any non-pointer, non-interface field
	// appearing in ForceSendFields will be sent to the server regardless of
	// whether the field is empty or not. This may be used to include empty
	// fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g.
	// "AdvanceBookingWindowRange") to include in API requests with the JSON
	// null value. By default, fields with empty values are omitted from API
	// requests. However, any field with an empty value appearing in
	// NullFields will be sent to the server as null. It is an error if a
	// field in this list has a non-empty value. This may be used to include
	// null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PriceCoverageBucket) MarshalJSON() ([]byte, error) {
	type NoMethod PriceCoverageBucket
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *PriceCoverageBucket) UnmarshalJSON(data []byte) error {
	type NoMethod PriceCoverageBucket
	var s1 struct {
		PriceCoveragePercent gensupport.JSONFloat64 `json:"priceCoveragePercent"`
		*NoMethod
	}
	s1.NoMethod = (*NoMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.PriceCoveragePercent = float64(s1.PriceCoveragePercent)
	return nil
}

// PriceCoverageView: A price coverage view. Covers the
// `price_coverage_stats` Scorecard functionality in pre-v3.0 API
// versions. For more information, refer to Price Coverage for Push and
// Hint partners.
type PriceCoverageView struct {
	// CalculationDate: The date on which the calculations were made.
	CalculationDate *Date `json:"calculationDate,omitempty"`

	// MatchedPropertyCount: The total number of properties that have prices
	// for the given itineraries.
	MatchedPropertyCount int64 `json:"matchedPropertyCount,omitempty"`

	// PriceCoverageBinaryPercent: The ratio between the number of hotels
	// which have at least one price for the calculation period and
	// `matched_property_count`.
	PriceCoverageBinaryPercent float64 `json:"priceCoverageBinaryPercent,omitempty"`

	// PriceCoverageBuckets: Price coverage stats for combinations of
	// advance booking window and length of stay ranges.
	PriceCoverageBuckets []*PriceCoverageBucket `json:"priceCoverageBuckets,omitempty"`

	// PriceCoveragePercent: The overall price coverage for an account. This
	// value is the ratio between the number of hotel prices for the
	// calculation booking window and length of stay range divided by the
	// number of all possible prices, which is `matched_property_count`
	// times 330 (for advance book window) times 30 (for length of stay).
	PriceCoveragePercent float64 `json:"priceCoveragePercent,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "CalculationDate") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CalculationDate") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *PriceCoverageView) MarshalJSON() ([]byte, error) {
	type NoMethod PriceCoverageView
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *PriceCoverageView) UnmarshalJSON(data []byte) error {
	type NoMethod PriceCoverageView
	var s1 struct {
		PriceCoverageBinaryPercent gensupport.JSONFloat64 `json:"priceCoverageBinaryPercent"`
		PriceCoveragePercent       gensupport.JSONFloat64 `json:"priceCoveragePercent"`
		*NoMethod
	}
	s1.NoMethod = (*NoMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.PriceCoverageBinaryPercent = float64(s1.PriceCoverageBinaryPercent)
	s.PriceCoveragePercent = float64(s1.PriceCoveragePercent)
	return nil
}

// PriceMissingCountDetails: The reasons that contributed to the price
// missing count and the total count for each reason.
type PriceMissingCountDetails struct {
	// BandwidthDepletedCount: No price was cached for this itinerary, and
	// there was no live query quota remaining.
	BandwidthDepletedCount int64 `json:"bandwidthDepletedCount,omitempty,string"`

	// CacheRateMissingCount: No price exists in the cache for this
	// itinerary. A live query was not done due to page constraints.
	CacheRateMissingCount int64 `json:"cacheRateMissingCount,omitempty,string"`

	// ItineraryBlockedCount: The itinerary was outside of your basic
	// parameters, so no price was pulled for the itinerary from either live
	// query or cache fill.
	ItineraryBlockedCount int64 `json:"itineraryBlockedCount,omitempty,string"`

	// LivePricingErrorCount: No price was cached for this itinerary. A live
	// query did not time out, but your system returned an error.
	LivePricingErrorCount int64 `json:"livePricingErrorCount,omitempty,string"`

	// LivePricingNotSetupCount: No price was cached for this itinerary, and
	// live query was not configured for this account.
	LivePricingNotSetupCount int64 `json:"livePricingNotSetupCount,omitempty,string"`

	// LivePricingTimeoutCount: No price was cached for this itinerary, and
	// a live query sent to your system timed out.
	LivePricingTimeoutCount int64 `json:"livePricingTimeoutCount,omitempty,string"`

	// ForceSendFields is a list of field names (e.g.
	// "BandwidthDepletedCount") to unconditionally include in API requests.
	// By default, fields with empty or default values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BandwidthDepletedCount")
	// to include in API requests with the JSON null value. By default,
	// fields with empty values are omitted from API requests. However, any
	// field with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *PriceMissingCountDetails) MarshalJSON() ([]byte, error) {
	type NoMethod PriceMissingCountDetails
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// PriceProblemCountDetails: The reasons that contributed to the price
// problem count and the total count for each reason.
type PriceProblemCountDetails struct {
	// HotelSuspendedCount: The hotel was suspended. This may be due to
	// persistent problems in areas such as incorrect taxes and fees.
	HotelSuspendedCount int64 `json:"hotelSuspendedCount,omitempty,string"`

	// PriceUnusuallyHighCount: The price given for this itinerary seemed
	// oddly high compared to regional trends.
	PriceUnusuallyHighCount int64 `json:"priceUnusuallyHighCount,omitempty,string"`

	// PriceUnusuallyLowCount: The price given for this itinerary seemed
	// oddly low compared to regional trends.
	PriceUnusuallyLowCount int64 `json:"priceUnusuallyLowCount,omitempty,string"`

	// TaxesAndFeesMissingCount: Taxes and fees were missing from pricing.
	TaxesAndFeesMissingCount int64 `json:"taxesAndFeesMissingCount,omitempty,string"`

	// ForceSendFields is a list of field names (e.g. "HotelSuspendedCount")
	// to unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "HotelSuspendedCount") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *PriceProblemCountDetails) MarshalJSON() ([]byte, error) {
	type NoMethod PriceProblemCountDetails
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// PriceRecord: A price record.
type PriceRecord struct {
	// BasePrice: Base price.
	BasePrice float64 `json:"basePrice,omitempty"`

	// CurrencyCode: ISO 4217 currency code.
	CurrencyCode string `json:"currencyCode,omitempty"`

	// TaxesAndFees: Taxes and fees.
	TaxesAndFees float64 `json:"taxesAndFees,omitempty"`

	// Time: Timestamp of this price record.
	Time string `json:"time,omitempty"`

	// ForceSendFields is a list of field names (e.g. "BasePrice") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "BasePrice") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PriceRecord) MarshalJSON() ([]byte, error) {
	type NoMethod PriceRecord
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *PriceRecord) UnmarshalJSON(data []byte) error {
	type NoMethod PriceRecord
	var s1 struct {
		BasePrice    gensupport.JSONFloat64 `json:"basePrice"`
		TaxesAndFees gensupport.JSONFloat64 `json:"taxesAndFees"`
		*NoMethod
	}
	s1.NoMethod = (*NoMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.BasePrice = float64(s1.BasePrice)
	s.TaxesAndFees = float64(s1.TaxesAndFees)
	return nil
}

// PriceUnavailableCountDetails: The reasons that contributed to the
// price unavailable count and the total count for each reason.
type PriceUnavailableCountDetails struct {
	// ParticipationNotLikelyCount: No price was cached for this itinerary,
	// and no live query was done because your server usually tells us the
	// hotel is unavailable or sold out.
	ParticipationNotLikelyCount int64 `json:"participationNotLikelyCount,omitempty,string"`

	// PriceUnavailableCount: Hotel did not participate because it wasn't
	// available for the itinerary dates.
	PriceUnavailableCount int64 `json:"priceUnavailableCount,omitempty,string"`

	// ForceSendFields is a list of field names (e.g.
	// "ParticipationNotLikelyCount") to unconditionally include in API
	// requests. By default, fields with empty or default values are omitted
	// from API requests. However, any non-pointer, non-interface field
	// appearing in ForceSendFields will be sent to the server regardless of
	// whether the field is empty or not. This may be used to include empty
	// fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g.
	// "ParticipationNotLikelyCount") to include in API requests with the
	// JSON null value. By default, fields with empty values are omitted
	// from API requests. However, any field with an empty value appearing
	// in NullFields will be sent to the server as null. It is an error if a
	// field in this list has a non-empty value. This may be used to include
	// null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PriceUnavailableCountDetails) MarshalJSON() ([]byte, error) {
	type NoMethod PriceUnavailableCountDetails
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// PriceView: A price view. Covers the Prices functionality in pre-v3.0
// API versions.
type PriceView struct {
	// Name: Resource name in the format
	// `accounts/{account_id}/priceViews/{partner_hotel_id}`.
	Name string `json:"name,omitempty"`

	// PerItineraryPrices: Price for each itinerary.
	PerItineraryPrices []*HotelPricePerItinerary `json:"perItineraryPrices,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Name") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Name") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PriceView) MarshalJSON() ([]byte, error) {
	type NoMethod PriceView
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// PropertyPerformanceResult: Represents a result from querying for the
// property performance report for an account.
type PropertyPerformanceResult struct {
	// AdsClickCount: The total number of ad clicks that were recorded for
	// this result.
	AdsClickCount int64 `json:"adsClickCount,omitempty,string"`

	// AdsClickthroughRate: Equal to `ads_click_count` divided by
	// `ads_impression_count`.
	AdsClickthroughRate float64 `json:"adsClickthroughRate,omitempty"`

	// AdsImpressionCount: The total number of ad impressions that were
	// recorded for this result.
	AdsImpressionCount int64 `json:"adsImpressionCount,omitempty,string"`

	// AdvanceBookingWindow: Difference in days between query date and
	// check-in date in property's local timezone. Only present if
	// `advanceBookingWindow` is specified in `aggregateBy` in the request.
	//
	// Possible values:
	//   "ADVANCE_BOOKING_WINDOW_UNSPECIFIED" - Not specified.
	//   "ADVANCE_BOOKING_WINDOW_SAME_DAY" - Check-in date was same as query
	// date.
	//   "ADVANCE_BOOKING_WINDOW_NEXT_DAY" - Check-in date was next day
	// after query date.
	//   "ADVANCE_BOOKING_WINDOW_DAYS_2_TO_7" - Check-in date was 2-7 days
	// after query date.
	//   "ADVANCE_BOOKING_WINDOW_DAYS_8_TO_14" - Check-in date was 8-14 days
	// after query date.
	//   "ADVANCE_BOOKING_WINDOW_DAYS_15_TO_30" - Check-in date was 15-30
	// days after query date.
	//   "ADVANCE_BOOKING_WINDOW_DAYS_31_TO_60" - Check-in date was 31-60
	// days after query date.
	//   "ADVANCE_BOOKING_WINDOW_DAYS_61_TO_90" - Check-in date was 61-90
	// days after query date.
	//   "ADVANCE_BOOKING_WINDOW_DAYS_91_TO_120" - Check-in date was 91-120
	// days after query date.
	//   "ADVANCE_BOOKING_WINDOW_DAYS_121_TO_150" - Check-in date was
	// 121-150 days after query date.
	//   "ADVANCE_BOOKING_WINDOW_DAYS_151_TO_180" - Check-in date was
	// 151-180 days after query date.
	//   "ADVANCE_BOOKING_WINDOW_DAYS_OVER_180" - Check-in date was over 180
	// days after query date.
	AdvanceBookingWindow string `json:"advanceBookingWindow,omitempty"`

	// Brand: Partner-specified brand for the property. Only present if
	// `brand` is specified in `aggregateBy` in the request.
	Brand string `json:"brand,omitempty"`

	// ClickCount: The total number of free booking link clicks that were
	// recorded for this result.
	ClickCount int64 `json:"clickCount,omitempty,string"`

	// ClickthroughRate: Equal to `click_count` divided by
	// `impression_count`.
	ClickthroughRate float64 `json:"clickthroughRate,omitempty"`

	// Date: A date within the requested date range. Only present if `date`
	// is specified in `aggregateBy` in the request.
	Date *Date `json:"date,omitempty"`

	// DeviceType: The user’s device type. Only present if `deviceType` is
	// specified in `aggregateBy` in the request.
	//
	// Possible values:
	//   "DEVICE_UNSPECIFIED" - Not specified.
	//   "DEVICE_UNKNOWN" - The value is unknown in this version.
	//   "DESKTOP" - Computers.
	//   "MOBILE" - Mobile devices with full browsers.
	//   "TABLET" - Tablets with full browsers.
	DeviceType string `json:"deviceType,omitempty"`

	// HighIntentUsers: Whether the user’s query indicated a strong
	// interest in booking. Only present if `highIntentUsers` is specified
	// in `aggregateBy` in the request.
	HighIntentUsers bool `json:"highIntentUsers,omitempty"`

	// ImpressionCount: The total number of free booking link impressions
	// that were recorded for this result. This value is rounded to preserve
	// user privacy.
	ImpressionCount int64 `json:"impressionCount,omitempty,string"`

	// LengthOfStay: Number of nights between check-in and check-out dates
	// specified by user. Only present if `lengthOfStay` is specified in
	// `aggregateBy` in the request.
	//
	// Possible values:
	//   "LENGTH_OF_STAY_UNSPECIFIED" - Not specified.
	//   "LENGTH_OF_STAY_NIGHTS_1" - Single night stay.
	//   "LENGTH_OF_STAY_NIGHTS_2" - Stay of 2 nights.
	//   "LENGTH_OF_STAY_NIGHTS_3" - Stay of 3 nights.
	//   "LENGTH_OF_STAY_NIGHTS_4_TO_7" - Stay of 4-7 nights.
	//   "LENGTH_OF_STAY_NIGHTS_8_TO_14" - Stay of 8-14 nights.
	//   "LENGTH_OF_STAY_NIGHTS_15_TO_21" - Stay of 15-21 nights.
	//   "LENGTH_OF_STAY_NIGHTS_22_TO_30" - Stay of 22-30 nights.
	//   "LENGTH_OF_STAY_NIGHTS_OVER_30" - Stay of over 30 nights.
	LengthOfStay string `json:"lengthOfStay,omitempty"`

	// Occupancy: Requested number of people staying at the property. Only
	// present if `partnerPropertyId` is specified in `aggregateBy` in the
	// request.
	//
	// Possible values:
	//   "OCCUPANCY_UNSPECIFIED" - Not specified.
	//   "OCCUPANCY_1" - Single person.
	//   "OCCUPANCY_2" - Two people.
	//   "OCCUPANCY_3" - Three people.
	//   "OCCUPANCY_4" - Four people.
	//   "OCCUPANCY_OVER_4" - Over 4 people.
	Occupancy string `json:"occupancy,omitempty"`

	// PartnerPropertyDisplayName: Partner's property name. Only present if
	// `partnerPropertyDisplayName` is specified in `aggregateBy` in the
	// request.
	PartnerPropertyDisplayName string `json:"partnerPropertyDisplayName,omitempty"`

	// PartnerPropertyId: Partner's property ID. Only present if
	// `partnerPropertyId` is specified in `aggregateBy` in the request.
	PartnerPropertyId string `json:"partnerPropertyId,omitempty"`

	// PropertyRegionCode: ISO 3116 region code of the country/region of the
	// property. Only present if `propertyRegionCode` is specified in
	// `aggregateBy` in the request
	PropertyRegionCode string `json:"propertyRegionCode,omitempty"`

	// UserRegionCode: ISO 3116 region code of the country/region of the
	// user. Only present if `userRegionCode` is specified in `aggregateBy`
	// in the request
	UserRegionCode string `json:"userRegionCode,omitempty"`

	// VrWebsiteButtonClicks: The total number of clicks on the "Website"
	// button on Google for vacation rentals.
	VrWebsiteButtonClicks int64 `json:"vrWebsiteButtonClicks,omitempty,string"`

	// ForceSendFields is a list of field names (e.g. "AdsClickCount") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "AdsClickCount") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *PropertyPerformanceResult) MarshalJSON() ([]byte, error) {
	type NoMethod PropertyPerformanceResult
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *PropertyPerformanceResult) UnmarshalJSON(data []byte) error {
	type NoMethod PropertyPerformanceResult
	var s1 struct {
		AdsClickthroughRate gensupport.JSONFloat64 `json:"adsClickthroughRate"`
		ClickthroughRate    gensupport.JSONFloat64 `json:"clickthroughRate"`
		*NoMethod
	}
	s1.NoMethod = (*NoMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.AdsClickthroughRate = float64(s1.AdsClickthroughRate)
	s.ClickthroughRate = float64(s1.ClickthroughRate)
	return nil
}

// QueryFreeBookingLinksReportResponse: **DEPRECATED:** Use
// `QueryPropertyPerformanceReportResponse` with
// `PropertyPerformanceReportService` instead. Response message for
// FreeBookingLinksReportService.QueryFreeBookingLinksReport.
type QueryFreeBookingLinksReportResponse struct {
	// NextPageToken: Pagination token used to retrieve the next page of
	// results. If this field is omitted, there are no subsequent pages.
	NextPageToken string `json:"nextPageToken,omitempty"`

	// Results: The list of results that match the query.
	Results []*FreeBookingLinksResult `json:"results,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "NextPageToken") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "NextPageToken") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *QueryFreeBookingLinksReportResponse) MarshalJSON() ([]byte, error) {
	type NoMethod QueryFreeBookingLinksReportResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// QueryParticipationReportResponse: Response message for
// ParticipationReportService.QueryParticipationReport.
type QueryParticipationReportResponse struct {
	// NextPageToken: Pagination token used to retrieve the next page of
	// results.
	NextPageToken string `json:"nextPageToken,omitempty"`

	// Results: The list of results that matches the query.
	Results []*ParticipationResult `json:"results,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "NextPageToken") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "NextPageToken") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *QueryParticipationReportResponse) MarshalJSON() ([]byte, error) {
	type NoMethod QueryParticipationReportResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// QueryPropertyPerformanceReportResponse: Response message for
// PropertyPerformanceReportService.QueryPropertyPerformanceReport.
type QueryPropertyPerformanceReportResponse struct {
	// NextPageToken: Pagination token used to retrieve the next page of
	// results. If this field is omitted, there are no subsequent pages.
	NextPageToken string `json:"nextPageToken,omitempty"`

	// Results: The list of results that match the query.
	Results []*PropertyPerformanceResult `json:"results,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "NextPageToken") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "NextPageToken") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *QueryPropertyPerformanceReportResponse) MarshalJSON() ([]byte, error) {
	type NoMethod QueryPropertyPerformanceReportResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// Rating: A rating for a vacation rentals listing. NEXT ID: 4
type Rating struct {
	// RatingScale: Maximum rating possible.
	RatingScale int64 `json:"ratingScale,omitempty"`

	// Score: The rating score. (e.g. 8.5)
	Score float64 `json:"score,omitempty"`

	// Type: The type of the rating.
	//
	// Possible values:
	//   "TYPE_UNSPECIFIED" - Rating type is unspecified.
	//   "OVERALL" - Rating is of overall type.
	Type string `json:"type,omitempty"`

	// ForceSendFields is a list of field names (e.g. "RatingScale") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "RatingScale") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Rating) MarshalJSON() ([]byte, error) {
	type NoMethod Rating
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

func (s *Rating) UnmarshalJSON(data []byte) error {
	type NoMethod Rating
	var s1 struct {
		Score gensupport.JSONFloat64 `json:"score"`
		*NoMethod
	}
	s1.NoMethod = (*NoMethod)(s)
	if err := json.Unmarshal(data, &s1); err != nil {
		return err
	}
	s.Score = float64(s1.Score)
	return nil
}

// ReconciliationReport: Reconciliation report (Hotel Ads only). Covers
// the Reconciliation Reports functionality in pre-v3.0 API versions.
// Lets you see the status, validate, and upload your Commissions
// reconciliation reports. This only applies if you are in the Google
// Hotel Ads Commissions Program (GHACP). For more information about
// working with reconciliation reports in Hotel Center, refer to
// Reconciliation reports
// (//support.google.com/hotelprices/answer/7019060#sending).
type ReconciliationReport struct {
	// Contents: Required. The contents of the commission report. Report
	// contents must conform to the requirements specified in
	// [Reconciliation reports]
	// (//support.google.com/hotelprices/answer/7019060#creating).
	Contents string `json:"contents,omitempty"`

	// FileName: Required. Desired filename of the reconciliation report.
	FileName string `json:"fileName,omitempty"`

	// Name: Resource name in the format
	// `accounts/{account_id}/reconciliationReports/{datetime}~{filename}`.
	// The value for `{datetime}` must be from 0001-01-01T00:00:00 to
	// 9999-12-31T23:59:59 inclusive.
	Name string `json:"name,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Contents") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Contents") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ReconciliationReport) MarshalJSON() ([]byte, error) {
	type NoMethod ReconciliationReport
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// ReconciliationReportValidationIssue: Represents an issue encountered
// when validating a reconciliation report.
type ReconciliationReportValidationIssue struct {
	// Description: Text description of the issue, typically including what
	// was seen and why it was invalid.
	Description string `json:"description,omitempty"`

	// FieldName: Name of the invalid field. If no field name is given, this
	// issue applies to the whole line (or file).
	FieldName string `json:"fieldName,omitempty"`

	// LineNum: The line number on which the issue was detected. If this
	// field is 0, the issue applies to the whole file.
	LineNum int64 `json:"lineNum,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Description") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Description") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ReconciliationReportValidationIssue) MarshalJSON() ([]byte, error) {
	type NoMethod ReconciliationReportValidationIssue
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// Review: A single review in a VR Listing. NEXT ID: 10
type Review struct {
	// Author: The author of the review.
	Author string `json:"author,omitempty"`

	// Body: The body of the review.
	Body string `json:"body,omitempty"`

	// LanguageCode: Language of the review in ISO639 format, such as "en",
	// "de", etc.
	LanguageCode string `json:"languageCode,omitempty"`

	// Link: The url of the review.
	Link string `json:"link,omitempty"`

	// Rating: Any ratings associated with this review. This is repeated
	// because reviews can include ratings on different aspects of a
	// listing, e.g. location, cleanliness, etc.
	Rating []*Rating `json:"rating,omitempty"`

	// ReviewTime: Unix timestamp (in seconds) of the review, in UTC+0.
	ReviewTime string `json:"reviewTime,omitempty"`

	// Title: The title of the review, for example: Great three bedrooms.
	Title string `json:"title,omitempty"`

	// Type: The type of the review.
	//
	// Possible values:
	//   "UNKNOWN" - Review type is unknown.
	//   "EDITORIAL" - Review is of editorial type.
	//   "USER" - Review is of user type.
	Type string `json:"type,omitempty"`

	// VisitTime: Unix timestamp (in seconds) of when the stay was, in
	// UTC+0.
	VisitTime string `json:"visitTime,omitempty"`

	// ForceSendFields is a list of field names (e.g. "Author") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Author") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *Review) MarshalJSON() ([]byte, error) {
	type NoMethod Review
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// SetLiveOnGoogleRequest: Request message for
// HotelService.SetLiveOnGoogle.
type SetLiveOnGoogleRequest struct {
	// LiveOnGoogle: Required. Whether the property will show on Google.
	// When true, Google will show the properties if their integration is
	// complete and the property is available. When false, Google will never
	// show the properties.
	LiveOnGoogle bool `json:"liveOnGoogle,omitempty"`

	// PartnerHotelIds: Required. Identifies the properties to update with
	// the liveOnGoogle setting.
	PartnerHotelIds []string `json:"partnerHotelIds,omitempty"`

	// ForceSendFields is a list of field names (e.g. "LiveOnGoogle") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "LiveOnGoogle") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *SetLiveOnGoogleRequest) MarshalJSON() ([]byte, error) {
	type NoMethod SetLiveOnGoogleRequest
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// SetLiveOnGoogleResponse: Response message for
// HotelService.SetLiveOnGoogle.
type SetLiveOnGoogleResponse struct {
	// FailedHotelIds: Identifies properties that Google could not update.
	FailedHotelIds []string `json:"failedHotelIds,omitempty"`

	// UpdatedHotelIds: Identifies the updated properties.
	UpdatedHotelIds []string `json:"updatedHotelIds,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "FailedHotelIds") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "FailedHotelIds") to
	// include in API requests with the JSON null value. By default, fields
	// with empty values are omitted from API requests. However, any field
	// with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *SetLiveOnGoogleResponse) MarshalJSON() ([]byte, error) {
	type NoMethod SetLiveOnGoogleResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// SummarizeHotelViewsResponse: Response message for
// HotelViewService.SummarizeHotelViews.
type SummarizeHotelViewsResponse struct {
	// LastFeedSubmissionTime: Timestamp of the last hotel feed submission.
	LastFeedSubmissionTime string `json:"lastFeedSubmissionTime,omitempty"`

	// LastManifestUpdateTime: Timestamp of the last hotel manifest update.
	LastManifestUpdateTime string `json:"lastManifestUpdateTime,omitempty"`

	// LiveOnGooglePropertyCount: The number of properties that are Live on
	// Google.
	LiveOnGooglePropertyCount int64 `json:"liveOnGooglePropertyCount,omitempty,string"`

	// MatchedPropertyCount: The number of properties that match Google's
	// manifest.
	MatchedPropertyCount int64 `json:"matchedPropertyCount,omitempty,string"`

	// OverclusteredPropertyCount: The number of hotels that are considered
	// overclustered.
	OverclusteredPropertyCount int64 `json:"overclusteredPropertyCount,omitempty,string"`

	// OverclusteredPropertyWithErrorsCount: The number of overclustered
	// properties that have data-related errors.
	OverclusteredPropertyWithErrorsCount int64 `json:"overclusteredPropertyWithErrorsCount,omitempty,string"`

	// UnmatchedPropertyCount: The number of properties that are considered
	// unmatched.
	UnmatchedPropertyCount int64 `json:"unmatchedPropertyCount,omitempty,string"`

	// UnmatchedPropertyWithErrorsCount: The number of unmatched properties
	// that have data-related errors.
	UnmatchedPropertyWithErrorsCount int64 `json:"unmatchedPropertyWithErrorsCount,omitempty,string"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g.
	// "LastFeedSubmissionTime") to unconditionally include in API requests.
	// By default, fields with empty or default values are omitted from API
	// requests. However, any non-pointer, non-interface field appearing in
	// ForceSendFields will be sent to the server regardless of whether the
	// field is empty or not. This may be used to include empty fields in
	// Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "LastFeedSubmissionTime")
	// to include in API requests with the JSON null value. By default,
	// fields with empty values are omitted from API requests. However, any
	// field with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *SummarizeHotelViewsResponse) MarshalJSON() ([]byte, error) {
	type NoMethod SummarizeHotelViewsResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// SummarizePriceAccuracyResponse: Response message for
// PriceAccuracyViewService.SummarizePriceAccuracy.
type SummarizePriceAccuracyResponse struct {
	// CurrentBookOnGoogleScore: The current Book on Google price accuracy
	// score.
	//
	// Possible values:
	//   "PRICE_ACCURACY_STATE_UNSPECIFIED" - Not specified.
	//   "PRICE_ACCURACY_STATE_UNKNOWN" - The value is unknown in this
	// version.
	//   "EXCELLENT" - Average score exceeds the positioning threshold.
	//   "GOOD" - Average score is slightly below the positioning threshold.
	// “Good” has been renamed to “Fair” in Hotel Center.
	//   "POOR" - Average score is well below the positioning threshold.
	//   "AT_RISK" - Average score is close to the account suspension
	// threshold.
	//   "FAILED" - Average score is below the account suspension threshold.
	CurrentBookOnGoogleScore string `json:"currentBookOnGoogleScore,omitempty"`

	// CurrentOverallScore: The current price accuracy score combining both
	// website and Book on Google scores.
	//
	// Possible values:
	//   "PRICE_ACCURACY_STATE_UNSPECIFIED" - Not specified.
	//   "PRICE_ACCURACY_STATE_UNKNOWN" - The value is unknown in this
	// version.
	//   "EXCELLENT" - Average score exceeds the positioning threshold.
	//   "GOOD" - Average score is slightly below the positioning threshold.
	// “Good” has been renamed to “Fair” in Hotel Center.
	//   "POOR" - Average score is well below the positioning threshold.
	//   "AT_RISK" - Average score is close to the account suspension
	// threshold.
	//   "FAILED" - Average score is below the account suspension threshold.
	CurrentOverallScore string `json:"currentOverallScore,omitempty"`

	// CurrentScore: The current price accuracy score. Contains the same
	// value as `current_website_score`. For clarity, use either
	// `current_website_score` or 'current_overall_score` depending upon
	// which is needed.
	//
	// Possible values:
	//   "PRICE_ACCURACY_STATE_UNSPECIFIED" - Not specified.
	//   "PRICE_ACCURACY_STATE_UNKNOWN" - The value is unknown in this
	// version.
	//   "EXCELLENT" - Average score exceeds the positioning threshold.
	//   "GOOD" - Average score is slightly below the positioning threshold.
	// “Good” has been renamed to “Fair” in Hotel Center.
	//   "POOR" - Average score is well below the positioning threshold.
	//   "AT_RISK" - Average score is close to the account suspension
	// threshold.
	//   "FAILED" - Average score is below the account suspension threshold.
	CurrentScore string `json:"currentScore,omitempty"`

	// CurrentWebsiteScore: The current website price accuracy score.
	//
	// Possible values:
	//   "PRICE_ACCURACY_STATE_UNSPECIFIED" - Not specified.
	//   "PRICE_ACCURACY_STATE_UNKNOWN" - The value is unknown in this
	// version.
	//   "EXCELLENT" - Average score exceeds the positioning threshold.
	//   "GOOD" - Average score is slightly below the positioning threshold.
	// “Good” has been renamed to “Fair” in Hotel Center.
	//   "POOR" - Average score is well below the positioning threshold.
	//   "AT_RISK" - Average score is close to the account suspension
	// threshold.
	//   "FAILED" - Average score is below the account suspension threshold.
	CurrentWebsiteScore string `json:"currentWebsiteScore,omitempty"`

	// PredictedBookOnGoogleScore: The predicted Book on Google price
	// accuracy score.
	//
	// Possible values:
	//   "PRICE_ACCURACY_STATE_UNSPECIFIED" - Not specified.
	//   "PRICE_ACCURACY_STATE_UNKNOWN" - The value is unknown in this
	// version.
	//   "EXCELLENT" - Average score exceeds the positioning threshold.
	//   "GOOD" - Average score is slightly below the positioning threshold.
	// “Good” has been renamed to “Fair” in Hotel Center.
	//   "POOR" - Average score is well below the positioning threshold.
	//   "AT_RISK" - Average score is close to the account suspension
	// threshold.
	//   "FAILED" - Average score is below the account suspension threshold.
	PredictedBookOnGoogleScore string `json:"predictedBookOnGoogleScore,omitempty"`

	// PredictedOverallScore: The predicted price accuracy score combining
	// both website and Book on Google scores.
	//
	// Possible values:
	//   "PRICE_ACCURACY_STATE_UNSPECIFIED" - Not specified.
	//   "PRICE_ACCURACY_STATE_UNKNOWN" - The value is unknown in this
	// version.
	//   "EXCELLENT" - Average score exceeds the positioning threshold.
	//   "GOOD" - Average score is slightly below the positioning threshold.
	// “Good” has been renamed to “Fair” in Hotel Center.
	//   "POOR" - Average score is well below the positioning threshold.
	//   "AT_RISK" - Average score is close to the account suspension
	// threshold.
	//   "FAILED" - Average score is below the account suspension threshold.
	PredictedOverallScore string `json:"predictedOverallScore,omitempty"`

	// PredictedScore: The predicted price accuracy score. Contains the same
	// value as `predicted_website_score`. For clarity, use either
	// `predicted_website_score` or 'predicted_overall_score` depending upon
	// which is needed.
	//
	// Possible values:
	//   "PRICE_ACCURACY_STATE_UNSPECIFIED" - Not specified.
	//   "PRICE_ACCURACY_STATE_UNKNOWN" - The value is unknown in this
	// version.
	//   "EXCELLENT" - Average score exceeds the positioning threshold.
	//   "GOOD" - Average score is slightly below the positioning threshold.
	// “Good” has been renamed to “Fair” in Hotel Center.
	//   "POOR" - Average score is well below the positioning threshold.
	//   "AT_RISK" - Average score is close to the account suspension
	// threshold.
	//   "FAILED" - Average score is below the account suspension threshold.
	PredictedScore string `json:"predictedScore,omitempty"`

	// PredictedWebsiteScore: The predicted website price accuracy score.
	//
	// Possible values:
	//   "PRICE_ACCURACY_STATE_UNSPECIFIED" - Not specified.
	//   "PRICE_ACCURACY_STATE_UNKNOWN" - The value is unknown in this
	// version.
	//   "EXCELLENT" - Average score exceeds the positioning threshold.
	//   "GOOD" - Average score is slightly below the positioning threshold.
	// “Good” has been renamed to “Fair” in Hotel Center.
	//   "POOR" - Average score is well below the positioning threshold.
	//   "AT_RISK" - Average score is close to the account suspension
	// threshold.
	//   "FAILED" - Average score is below the account suspension threshold.
	PredictedWebsiteScore string `json:"predictedWebsiteScore,omitempty"`

	// UpdateTime: The update timestamp for the current score.
	UpdateTime string `json:"updateTime,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g.
	// "CurrentBookOnGoogleScore") to unconditionally include in API
	// requests. By default, fields with empty or default values are omitted
	// from API requests. However, any non-pointer, non-interface field
	// appearing in ForceSendFields will be sent to the server regardless of
	// whether the field is empty or not. This may be used to include empty
	// fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "CurrentBookOnGoogleScore")
	// to include in API requests with the JSON null value. By default,
	// fields with empty values are omitted from API requests. However, any
	// field with an empty value appearing in NullFields will be sent to the
	// server as null. It is an error if a field in this list has a
	// non-empty value. This may be used to include null fields in Patch
	// requests.
	NullFields []string `json:"-"`
}

func (s *SummarizePriceAccuracyResponse) MarshalJSON() ([]byte, error) {
	type NoMethod SummarizePriceAccuracyResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// ValidateReconciliationReportResponse: Response message for
// ReconciliationReportService.ValidateReconciliationReport.
type ValidateReconciliationReportResponse struct {
	// Issues: Issues that were encountered when validating the file.
	Issues []*ReconciliationReportValidationIssue `json:"issues,omitempty"`

	// SuccessfulRecordCount: The number of commission records that were
	// successfully validated.
	SuccessfulRecordCount int64 `json:"successfulRecordCount,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "Issues") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "Issues") to include in API
	// requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *ValidateReconciliationReportResponse) MarshalJSON() ([]byte, error) {
	type NoMethod ValidateReconciliationReportResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// VerifyListingsRequest: Request message for
// VRPartnerListingVerificationService.VerifyPartnerListings.
type VerifyListingsRequest struct {
	// XmlListing: A listing that follows the XML format specified in
	// https://developers.google.com/hotels/hotel-prices/xml-reference/hotel-list-feed.
	XmlListing string `json:"xmlListing,omitempty"`

	// ForceSendFields is a list of field names (e.g. "XmlListing") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "XmlListing") to include in
	// API requests with the JSON null value. By default, fields with empty
	// values are omitted from API requests. However, any field with an
	// empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *VerifyListingsRequest) MarshalJSON() ([]byte, error) {
	type NoMethod VerifyListingsRequest
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// VerifyListingsResponse: Response message for
// VRPartnerListingVerificationService.VerifyPartnerListings.
type VerifyListingsResponse struct {
	// ParsedListing: The parsed listing output.
	ParsedListing *ParsedListing `json:"parsedListing,omitempty"`

	// ServerResponse contains the HTTP response code and headers from the
	// server.
	googleapi.ServerResponse `json:"-"`

	// ForceSendFields is a list of field names (e.g. "ParsedListing") to
	// unconditionally include in API requests. By default, fields with
	// empty or default values are omitted from API requests. However, any
	// non-pointer, non-interface field appearing in ForceSendFields will be
	// sent to the server regardless of whether the field is empty or not.
	// This may be used to include empty fields in Patch requests.
	ForceSendFields []string `json:"-"`

	// NullFields is a list of field names (e.g. "ParsedListing") to include
	// in API requests with the JSON null value. By default, fields with
	// empty values are omitted from API requests. However, any field with
	// an empty value appearing in NullFields will be sent to the server as
	// null. It is an error if a field in this list has a non-empty value.
	// This may be used to include null fields in Patch requests.
	NullFields []string `json:"-"`
}

func (s *VerifyListingsResponse) MarshalJSON() ([]byte, error) {
	type NoMethod VerifyListingsResponse
	raw := NoMethod(*s)
	return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
}

// method id "travelpartner.accounts.accountLinks.create":

type AccountsAccountLinksCreateCall struct {
	s           *Service
	parent      string
	accountlink *AccountLink
	urlParams_  gensupport.URLParams
	ctx_        context.Context
	header_     http.Header
}

// Create: Creates a new account link between a Hotel Center account and
// a Google Ads account.
//
//   - parent: The resource name of the Hotel Center account being
//     queried. The format is `accounts/{account_id}`.
func (r *AccountsAccountLinksService) Create(parent string, accountlink *AccountLink) *AccountsAccountLinksCreateCall {
	c := &AccountsAccountLinksCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	c.accountlink = accountlink
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsAccountLinksCreateCall) Fields(s ...googleapi.Field) *AccountsAccountLinksCreateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsAccountLinksCreateCall) Context(ctx context.Context) *AccountsAccountLinksCreateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsAccountLinksCreateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsAccountLinksCreateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.accountlink)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/accountLinks")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("POST", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.accountLinks.create" call.
// Exactly one of *AccountLink or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *AccountLink.ServerResponse.Header or (if a response was returned at
// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
// to check whether the returned error was because
// http.StatusNotModified was returned.
func (c *AccountsAccountLinksCreateCall) Do(opts ...googleapi.CallOption) (*AccountLink, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &AccountLink{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates a new account link between a Hotel Center account and a Google Ads account.",
	//   "flatPath": "v3/accounts/{accountsId}/accountLinks",
	//   "httpMethod": "POST",
	//   "id": "travelpartner.accounts.accountLinks.create",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "The resource name of the Hotel Center account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/accountLinks",
	//   "request": {
	//     "$ref": "AccountLink"
	//   },
	//   "response": {
	//     "$ref": "AccountLink"
	//   }
	// }

}

// method id "travelpartner.accounts.accountLinks.delete":

type AccountsAccountLinksDeleteCall struct {
	s          *Service
	name       string
	urlParams_ gensupport.URLParams
	ctx_       context.Context
	header_    http.Header
}

// Delete: Deletes an account link.
//
//   - name: The resource name of the account link being deleted. The
//     format is `accounts/{account_id}/accountLinks/{account_link_id}`.
func (r *AccountsAccountLinksService) Delete(name string) *AccountsAccountLinksDeleteCall {
	c := &AccountsAccountLinksDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsAccountLinksDeleteCall) Fields(s ...googleapi.Field) *AccountsAccountLinksDeleteCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsAccountLinksDeleteCall) Context(ctx context.Context) *AccountsAccountLinksDeleteCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsAccountLinksDeleteCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsAccountLinksDeleteCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("DELETE", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.accountLinks.delete" call.
// Exactly one of *Empty or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Empty.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *AccountsAccountLinksDeleteCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &Empty{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Deletes an account link.",
	//   "flatPath": "v3/accounts/{accountsId}/accountLinks/{accountLinksId}",
	//   "httpMethod": "DELETE",
	//   "id": "travelpartner.accounts.accountLinks.delete",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "description": "Required. The resource name of the account link being deleted. The format is `accounts/{account_id}/accountLinks/{account_link_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+/accountLinks/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+name}",
	//   "response": {
	//     "$ref": "Empty"
	//   }
	// }

}

// method id "travelpartner.accounts.accountLinks.get":

type AccountsAccountLinksGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Returns the `AccountLink` instance associated with the account
// link resource name specified in the request URL. To get account link
// resource names, use the `list` method.
//
//   - name: The resource name of an account link. The format is
//     `accounts/{account_id}/accountLinks/{account_link_id}`.
func (r *AccountsAccountLinksService) Get(name string) *AccountsAccountLinksGetCall {
	c := &AccountsAccountLinksGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsAccountLinksGetCall) Fields(s ...googleapi.Field) *AccountsAccountLinksGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsAccountLinksGetCall) IfNoneMatch(entityTag string) *AccountsAccountLinksGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsAccountLinksGetCall) Context(ctx context.Context) *AccountsAccountLinksGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsAccountLinksGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsAccountLinksGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.accountLinks.get" call.
// Exactly one of *AccountLink or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *AccountLink.ServerResponse.Header or (if a response was returned at
// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
// to check whether the returned error was because
// http.StatusNotModified was returned.
func (c *AccountsAccountLinksGetCall) Do(opts ...googleapi.CallOption) (*AccountLink, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &AccountLink{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns the `AccountLink` instance associated with the account link resource name specified in the request URL. To get account link resource names, use the `list` method.",
	//   "flatPath": "v3/accounts/{accountsId}/accountLinks/{accountLinksId}",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.accountLinks.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "description": "The resource name of an account link. The format is `accounts/{account_id}/accountLinks/{account_link_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+/accountLinks/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+name}",
	//   "response": {
	//     "$ref": "AccountLink"
	//   }
	// }

}

// method id "travelpartner.accounts.accountLinks.list":

type AccountsAccountLinksListCall struct {
	s            *Service
	parent       string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Returns the account links for a Hotel Center account.
//
//   - parent: The resource name of the account being queried. The format
//     is `accounts/{account_id}`.
func (r *AccountsAccountLinksService) List(parent string) *AccountsAccountLinksListCall {
	c := &AccountsAccountLinksListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsAccountLinksListCall) Fields(s ...googleapi.Field) *AccountsAccountLinksListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsAccountLinksListCall) IfNoneMatch(entityTag string) *AccountsAccountLinksListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsAccountLinksListCall) Context(ctx context.Context) *AccountsAccountLinksListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsAccountLinksListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsAccountLinksListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/accountLinks")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.accountLinks.list" call.
// Exactly one of *ListAccountLinksResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *ListAccountLinksResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsAccountLinksListCall) Do(opts ...googleapi.CallOption) (*ListAccountLinksResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &ListAccountLinksResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns the account links for a Hotel Center account.",
	//   "flatPath": "v3/accounts/{accountsId}/accountLinks",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.accountLinks.list",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "The resource name of the account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/accountLinks",
	//   "response": {
	//     "$ref": "ListAccountLinksResponse"
	//   }
	// }

}

// method id "travelpartner.accounts.accountLinks.patch":

type AccountsAccountLinksPatchCall struct {
	s           *Service
	name        string
	accountlink *AccountLink
	urlParams_  gensupport.URLParams
	ctx_        context.Context
	header_     http.Header
}

// Patch: Updates the account link target of an account link.
//
//   - name: The resource name for the account link in the format
//     `accounts/{account_id}/accountLinks/{account_link_id}`.
func (r *AccountsAccountLinksService) Patch(name string, accountlink *AccountLink) *AccountsAccountLinksPatchCall {
	c := &AccountsAccountLinksPatchCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	c.accountlink = accountlink
	return c
}

// UpdateMask sets the optional parameter "updateMask": Required. The
// field to update. Only the `accountLinkTarget` field can be updated.
// Use the syntax shown in the example URL below and provide the new
// value in the request body. Example request URL and request body: ```
// PATCH https://travelpartner.googleapis.com/v3/accounts/123456789/
// accountLinks/0123456789?update_mask=account_link.account_link_target
// ``` ``` { "account_link_target": { "hotel_list": {
// "partner_hotel_ids": ["1234", "4321"] } } } ``` The response body
// will only include the `name` field of an `AccountLink`. The
// information above is sufficient for forming the URL and request body.
// The sentence below is auto-generated, supplemental information about
// the `FieldMask` format in general.
func (c *AccountsAccountLinksPatchCall) UpdateMask(updateMask string) *AccountsAccountLinksPatchCall {
	c.urlParams_.Set("updateMask", updateMask)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsAccountLinksPatchCall) Fields(s ...googleapi.Field) *AccountsAccountLinksPatchCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsAccountLinksPatchCall) Context(ctx context.Context) *AccountsAccountLinksPatchCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsAccountLinksPatchCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsAccountLinksPatchCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.accountlink)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("PATCH", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.accountLinks.patch" call.
// Exactly one of *AccountLink or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *AccountLink.ServerResponse.Header or (if a response was returned at
// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
// to check whether the returned error was because
// http.StatusNotModified was returned.
func (c *AccountsAccountLinksPatchCall) Do(opts ...googleapi.CallOption) (*AccountLink, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &AccountLink{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates the account link target of an account link.",
	//   "flatPath": "v3/accounts/{accountsId}/accountLinks/{accountLinksId}",
	//   "httpMethod": "PATCH",
	//   "id": "travelpartner.accounts.accountLinks.patch",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "description": "The resource name for the account link in the format `accounts/{account_id}/accountLinks/{account_link_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+/accountLinks/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     },
	//     "updateMask": {
	//       "description": "Required. The field to update. Only the `accountLinkTarget` field can be updated. Use the syntax shown in the example URL below and provide the new value in the request body. Example request URL and request body: ``` PATCH https://travelpartner.googleapis.com/v3/accounts/123456789/ accountLinks/0123456789?update_mask=account_link.account_link_target ``` ``` { \"account_link_target\": { \"hotel_list\": { \"partner_hotel_ids\": [\"1234\", \"4321\"] } } } ``` The response body will only include the `name` field of an `AccountLink`. The information above is sufficient for forming the URL and request body. The sentence below is auto-generated, supplemental information about the `FieldMask` format in general.",
	//       "format": "google-fieldmask",
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+name}",
	//   "request": {
	//     "$ref": "AccountLink"
	//   },
	//   "response": {
	//     "$ref": "AccountLink"
	//   }
	// }

}

// method id "travelpartner.accounts.brands.create":

type AccountsBrandsCreateCall struct {
	s          *Service
	parent     string
	brand      *Brand
	urlParams_ gensupport.URLParams
	ctx_       context.Context
	header_    http.Header
}

// Create: Creates a new brand. Because Google detects brands from your
// existing properties, you only need this operation when you want to
// configure a brand before you send its properties to Google. Note that
// it might take a couple of days after your listing feed first provides
// a brand for the brand to appear.
//
//   - parent: The resource name of the Hotel Center account being
//     queried. The format is `accounts/{account_id}`.
func (r *AccountsBrandsService) Create(parent string, brand *Brand) *AccountsBrandsCreateCall {
	c := &AccountsBrandsCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	c.brand = brand
	return c
}

// BrandId sets the optional parameter "brandId": Required. The
// partner-determined brand identifier.
func (c *AccountsBrandsCreateCall) BrandId(brandId string) *AccountsBrandsCreateCall {
	c.urlParams_.Set("brandId", brandId)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsBrandsCreateCall) Fields(s ...googleapi.Field) *AccountsBrandsCreateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsBrandsCreateCall) Context(ctx context.Context) *AccountsBrandsCreateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsBrandsCreateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsBrandsCreateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.brand)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/brands")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("POST", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.brands.create" call.
// Exactly one of *Brand or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Brand.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *AccountsBrandsCreateCall) Do(opts ...googleapi.CallOption) (*Brand, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &Brand{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates a new brand. Because Google detects brands from your existing properties, you only need this operation when you want to configure a brand before you send its properties to Google. Note that it might take a couple of days after your listing feed first provides a brand for the brand to appear.",
	//   "flatPath": "v3/accounts/{accountsId}/brands",
	//   "httpMethod": "POST",
	//   "id": "travelpartner.accounts.brands.create",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "brandId": {
	//       "description": "Required. The partner-determined brand identifier.",
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "parent": {
	//       "description": "Required. The resource name of the Hotel Center account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/brands",
	//   "request": {
	//     "$ref": "Brand"
	//   },
	//   "response": {
	//     "$ref": "Brand"
	//   }
	// }

}

// method id "travelpartner.accounts.brands.get":

type AccountsBrandsGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Returns the `Brand` instance associated with the request URI's
// brand resource name.
//
//   - name: The brand's resource name. The format is
//     `accounts/{account_id}/brands/{brand_id}`.
func (r *AccountsBrandsService) Get(name string) *AccountsBrandsGetCall {
	c := &AccountsBrandsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsBrandsGetCall) Fields(s ...googleapi.Field) *AccountsBrandsGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsBrandsGetCall) IfNoneMatch(entityTag string) *AccountsBrandsGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsBrandsGetCall) Context(ctx context.Context) *AccountsBrandsGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsBrandsGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsBrandsGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.brands.get" call.
// Exactly one of *Brand or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Brand.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *AccountsBrandsGetCall) Do(opts ...googleapi.CallOption) (*Brand, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &Brand{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns the `Brand` instance associated with the request URI's brand resource name.",
	//   "flatPath": "v3/accounts/{accountsId}/brands/{brandsId}",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.brands.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "description": "Required. The brand's resource name. The format is `accounts/{account_id}/brands/{brand_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+/brands/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+name}",
	//   "response": {
	//     "$ref": "Brand"
	//   }
	// }

}

// method id "travelpartner.accounts.brands.list":

type AccountsBrandsListCall struct {
	s            *Service
	parent       string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Returns the brands for a partner account.
//
//   - parent: The resource name of the account being queried. The format
//     is `accounts/{account_id}`.
func (r *AccountsBrandsService) List(parent string) *AccountsBrandsListCall {
	c := &AccountsBrandsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsBrandsListCall) Fields(s ...googleapi.Field) *AccountsBrandsListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsBrandsListCall) IfNoneMatch(entityTag string) *AccountsBrandsListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsBrandsListCall) Context(ctx context.Context) *AccountsBrandsListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsBrandsListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsBrandsListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/brands")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.brands.list" call.
// Exactly one of *ListBrandsResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ListBrandsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsBrandsListCall) Do(opts ...googleapi.CallOption) (*ListBrandsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &ListBrandsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns the brands for a partner account.",
	//   "flatPath": "v3/accounts/{accountsId}/brands",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.brands.list",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "Required. The resource name of the account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/brands",
	//   "response": {
	//     "$ref": "ListBrandsResponse"
	//   }
	// }

}

// method id "travelpartner.accounts.brands.patch":

type AccountsBrandsPatchCall struct {
	s          *Service
	nameid     string
	brand      *Brand
	urlParams_ gensupport.URLParams
	ctx_       context.Context
	header_    http.Header
}

// Patch: Updates a brand.
//
//   - name: Output only. The resource name for the brand in the format
//     `accounts/{account_id}/brands/{brand_id}`. The `brand_id`
//     corresponds to the partner's brand identifier used for landing page
//     matching and the property-level brand identifier. A default brand
//     is applied to properties that do not have a brand. The `brand_id`
//     of the default brand is `NO_BRAND_ID`. It can be fetched and
//     updated like any configured brand.
func (r *AccountsBrandsService) Patch(nameid string, brand *Brand) *AccountsBrandsPatchCall {
	c := &AccountsBrandsPatchCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.nameid = nameid
	c.brand = brand
	return c
}

// AllowMissing sets the optional parameter "allowMissing": When true,
// and the Brand is not found, a new Brand will be created. In this
// situation, `update_mask` is ignored.
func (c *AccountsBrandsPatchCall) AllowMissing(allowMissing bool) *AccountsBrandsPatchCall {
	c.urlParams_.Set("allowMissing", fmt.Sprint(allowMissing))
	return c
}

// UpdateMask sets the optional parameter "updateMask": Required. The
// field to update. Only the `display_names` and `icon` fields can be
// updated. Use the syntax shown in the example URI below and provide
// the new value in the request body. Example request URI and request
// body: ``` PATCH
// https://travelpartner.googleapis.com/v3/accounts/123456789/
// brands/my-brand?update_mask=brand.display_names ``` ``` {
// "display_names": [{ "language": "en" "text": "Gilles' Gites" }] } ```
// The information above is sufficient for forming the URI and request
// body. The sentence below is auto-generated, supplemental information
// about the `FieldMask` format in general.
func (c *AccountsBrandsPatchCall) UpdateMask(updateMask string) *AccountsBrandsPatchCall {
	c.urlParams_.Set("updateMask", updateMask)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsBrandsPatchCall) Fields(s ...googleapi.Field) *AccountsBrandsPatchCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsBrandsPatchCall) Context(ctx context.Context) *AccountsBrandsPatchCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsBrandsPatchCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsBrandsPatchCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.brand)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("PATCH", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.nameid,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.brands.patch" call.
// Exactly one of *Brand or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Brand.ServerResponse.Header or (if a response was returned at all)
// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
// check whether the returned error was because http.StatusNotModified
// was returned.
func (c *AccountsBrandsPatchCall) Do(opts ...googleapi.CallOption) (*Brand, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &Brand{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Updates a brand.",
	//   "flatPath": "v3/accounts/{accountsId}/brands/{brandsId}",
	//   "httpMethod": "PATCH",
	//   "id": "travelpartner.accounts.brands.patch",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "allowMissing": {
	//       "description": "When true, and the Brand is not found, a new Brand will be created. In this situation, `update_mask` is ignored.",
	//       "location": "query",
	//       "type": "boolean"
	//     },
	//     "name": {
	//       "description": "Output only. The resource name for the brand in the format `accounts/{account_id}/brands/{brand_id}`. The `brand_id` corresponds to the partner's brand identifier used for landing page matching and the property-level brand identifier. A default brand is applied to properties that do not have a brand. The `brand_id` of the default brand is `NO_BRAND_ID`. It can be fetched and updated like any configured brand.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+/brands/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     },
	//     "updateMask": {
	//       "description": "Required. The field to update. Only the `display_names` and `icon` fields can be updated. Use the syntax shown in the example URI below and provide the new value in the request body. Example request URI and request body: ``` PATCH https://travelpartner.googleapis.com/v3/accounts/123456789/ brands/my-brand?update_mask=brand.display_names ``` ``` { \"display_names\": [{ \"language\": \"en\" \"text\": \"Gilles' Gites\" }] } ``` The information above is sufficient for forming the URI and request body. The sentence below is auto-generated, supplemental information about the `FieldMask` format in general.",
	//       "format": "google-fieldmask",
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+name}",
	//   "request": {
	//     "$ref": "Brand"
	//   },
	//   "response": {
	//     "$ref": "Brand"
	//   }
	// }

}

// method id "travelpartner.accounts.freeBookingLinksReportViews.query":

type AccountsFreeBookingLinksReportViewsQueryCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Query: **DEPRECATED:** Use
// PropertyPerformanceReportService.QueryPropertyPerformanceReport,
// which also has impression reporting, instead. Provides the ability to
// query (get, filter, and segment) a free booking links report for a
// specific account.
//
//   - name: The resource name of the account being queried. Format:
//     accounts/{account_id}.
func (r *AccountsFreeBookingLinksReportViewsService) Query(name string) *AccountsFreeBookingLinksReportViewsQueryCall {
	c := &AccountsFreeBookingLinksReportViewsQueryCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// AggregateBy sets the optional parameter "aggregateBy": Specifies how
// to segment the metrics returned by the query. For example, if
// `userRegionCode` is specified, the `freeBookingLinksResult` will
// provide metrics aggregated by user region. The string value is a
// comma-separated list of fields. Valid fields are: `date`,
// `userRegionCode`, `deviceType`, `partnerHotelId`, and
// `partnerHotelDisplayName`. Only fields specified here are included in
// the FreeBookingLinksResult.
func (c *AccountsFreeBookingLinksReportViewsQueryCall) AggregateBy(aggregateBy string) *AccountsFreeBookingLinksReportViewsQueryCall {
	c.urlParams_.Set("aggregateBy", aggregateBy)
	return c
}

// Filter sets the optional parameter "filter": The conditions (fields
// and expressions) used to filter the free booking link metrics for the
// account being queried. The syntax requires spaces surrounding the
// `in` operator. Otherwise, spaces can be omitted. Conditions can be
// joined using the `and` operator. The `date` field is required. All
// other fields are optional. The `date` field values are inclusive and
// must be in YYYY-MM-DD format. The earliest acceptable date is
// 2021-03-09; earlier date values will be coerced to 2021-03-09. Values
// for `partnerHotelDisplayName` are matched case-insensitively.
// Examples of valid conditions are as follows: * `date = '2021-12-03'`
// * `date between '2021-12-03' and '2021-12-08'` * `deviceType =
// 'TABLET'` * `deviceType in ('MOBILE', 'TABLET')` * `partnerHotelId =
// 'AAA'` * `partnerHotelId in ('AAA', 'BBB')` *
// `partnerHotelDisplayName = 'hotel A'` * `partnerHotelDisplayName in
// ('Hotel A', 'HOTEL b')` * `userRegionCode = 'US'` * `userRegionCode
// in ('US', 'CA')`
func (c *AccountsFreeBookingLinksReportViewsQueryCall) Filter(filter string) *AccountsFreeBookingLinksReportViewsQueryCall {
	c.urlParams_.Set("filter", filter)
	return c
}

// PageSize sets the optional parameter "pageSize": The maximum number
// of participation results to return. The service may return fewer than
// this value. If unspecified, at most 10,000 results will be returned.
// The maximum value is 10,000; values above 10,000 will be coerced to
// 10,000.
func (c *AccountsFreeBookingLinksReportViewsQueryCall) PageSize(pageSize int64) *AccountsFreeBookingLinksReportViewsQueryCall {
	c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
	return c
}

// PageToken sets the optional parameter "pageToken": A page token,
// received from a previous QueryParticipationReport request. Provide
// this to receive the subsequent page. When paginating, all other
// parameters provided to QueryParticipationReport must match the call
// that provided the page token.
func (c *AccountsFreeBookingLinksReportViewsQueryCall) PageToken(pageToken string) *AccountsFreeBookingLinksReportViewsQueryCall {
	c.urlParams_.Set("pageToken", pageToken)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsFreeBookingLinksReportViewsQueryCall) Fields(s ...googleapi.Field) *AccountsFreeBookingLinksReportViewsQueryCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsFreeBookingLinksReportViewsQueryCall) IfNoneMatch(entityTag string) *AccountsFreeBookingLinksReportViewsQueryCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsFreeBookingLinksReportViewsQueryCall) Context(ctx context.Context) *AccountsFreeBookingLinksReportViewsQueryCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsFreeBookingLinksReportViewsQueryCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsFreeBookingLinksReportViewsQueryCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}/freeBookingLinksReportViews:query")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.freeBookingLinksReportViews.query" call.
// Exactly one of *QueryFreeBookingLinksReportResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *QueryFreeBookingLinksReportResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *AccountsFreeBookingLinksReportViewsQueryCall) Do(opts ...googleapi.CallOption) (*QueryFreeBookingLinksReportResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &QueryFreeBookingLinksReportResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "deprecated": true,
	//   "description": "**DEPRECATED:** Use PropertyPerformanceReportService.QueryPropertyPerformanceReport, which also has impression reporting, instead. Provides the ability to query (get, filter, and segment) a free booking links report for a specific account.",
	//   "flatPath": "v3/accounts/{accountsId}/freeBookingLinksReportViews:query",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.freeBookingLinksReportViews.query",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "aggregateBy": {
	//       "description": "Specifies how to segment the metrics returned by the query. For example, if `userRegionCode` is specified, the `freeBookingLinksResult` will provide metrics aggregated by user region. The string value is a comma-separated list of fields. Valid fields are: `date`, `userRegionCode`, `deviceType`, `partnerHotelId`, and `partnerHotelDisplayName`. Only fields specified here are included in the FreeBookingLinksResult.",
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "filter": {
	//       "description": "The conditions (fields and expressions) used to filter the free booking link metrics for the account being queried. The syntax requires spaces surrounding the `in` operator. Otherwise, spaces can be omitted. Conditions can be joined using the `and` operator. The `date` field is required. All other fields are optional. The `date` field values are inclusive and must be in YYYY-MM-DD format. The earliest acceptable date is 2021-03-09; earlier date values will be coerced to 2021-03-09. Values for `partnerHotelDisplayName` are matched case-insensitively. Examples of valid conditions are as follows: * `date = '2021-12-03'` * `date between '2021-12-03' and '2021-12-08'` * `deviceType = 'TABLET'` * `deviceType in ('MOBILE', 'TABLET')` * `partnerHotelId = 'AAA'` * `partnerHotelId in ('AAA', 'BBB')` * `partnerHotelDisplayName = 'hotel A'` * `partnerHotelDisplayName in ('Hotel A', 'HOTEL b')` * `userRegionCode = 'US'` * `userRegionCode in ('US', 'CA')`",
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "name": {
	//       "description": "The resource name of the account being queried. Format: accounts/{account_id}",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     },
	//     "pageSize": {
	//       "description": "The maximum number of participation results to return. The service may return fewer than this value. If unspecified, at most 10,000 results will be returned. The maximum value is 10,000; values above 10,000 will be coerced to 10,000.",
	//       "format": "int32",
	//       "location": "query",
	//       "type": "integer"
	//     },
	//     "pageToken": {
	//       "description": "A page token, received from a previous QueryParticipationReport request. Provide this to receive the subsequent page. When paginating, all other parameters provided to QueryParticipationReport must match the call that provided the page token.",
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+name}/freeBookingLinksReportViews:query",
	//   "response": {
	//     "$ref": "QueryFreeBookingLinksReportResponse"
	//   }
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *AccountsFreeBookingLinksReportViewsQueryCall) Pages(ctx context.Context, f func(*QueryFreeBookingLinksReportResponse) error) error {
	c.ctx_ = ctx
	defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.PageToken(x.NextPageToken)
	}
}

// method id "travelpartner.accounts.hotelViews.list":

type AccountsHotelViewsListCall struct {
	s            *Service
	parent       string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Returns the list of hotel views.
//
//   - parent: The resource name of the account being queried. The format
//     is `accounts/{account_id}`.
func (r *AccountsHotelViewsService) List(parent string) *AccountsHotelViewsListCall {
	c := &AccountsHotelViewsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	return c
}

// Filter sets the optional parameter "filter": The conditions (fields
// and expressions) used to filter HotelViews. The syntax requires
// spaces surrounding the `in` operator. Otherwise, spaces can be
// omitted. Conditions cannot be joined. The `hotelId` field can be used
// to select specific hotels. The `liveOnGoogle` field can select
// properties that Google shows, or properties that are omitted in
// google search results. The `matchStatus` field can be used to filter
// the list of HotelViews returned for the account. Examples of valid
// conditions and their syntax are as follows: * `hotelId = 'hotel_ABC'`
// * `hotelId in ('hotel_ABC', 'hotel_XYZ')` * `liveOnGoogle = 'TRUE'` *
// `liveOnGoogle = 'FALSE'` * `matchStatus = 'NOT_MATCHED'` *
// `matchStatus in ('NOT_MATCHED', 'MATCHED', 'MAP_OVERLAP')`
func (c *AccountsHotelViewsListCall) Filter(filter string) *AccountsHotelViewsListCall {
	c.urlParams_.Set("filter", filter)
	return c
}

// PageSize sets the optional parameter "pageSize": Number of elements
// to retrieve in a single page.
func (c *AccountsHotelViewsListCall) PageSize(pageSize int64) *AccountsHotelViewsListCall {
	c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
	return c
}

// PageToken sets the optional parameter "pageToken": Token of the page
// to retrieve.
func (c *AccountsHotelViewsListCall) PageToken(pageToken string) *AccountsHotelViewsListCall {
	c.urlParams_.Set("pageToken", pageToken)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsHotelViewsListCall) Fields(s ...googleapi.Field) *AccountsHotelViewsListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsHotelViewsListCall) IfNoneMatch(entityTag string) *AccountsHotelViewsListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsHotelViewsListCall) Context(ctx context.Context) *AccountsHotelViewsListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsHotelViewsListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsHotelViewsListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/hotelViews")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.hotelViews.list" call.
// Exactly one of *ListHotelViewsResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ListHotelViewsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsHotelViewsListCall) Do(opts ...googleapi.CallOption) (*ListHotelViewsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &ListHotelViewsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns the list of hotel views.",
	//   "flatPath": "v3/accounts/{accountsId}/hotelViews",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.hotelViews.list",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "filter": {
	//       "description": "Optional. The conditions (fields and expressions) used to filter HotelViews. The syntax requires spaces surrounding the `in` operator. Otherwise, spaces can be omitted. Conditions cannot be joined. The `hotelId` field can be used to select specific hotels. The `liveOnGoogle` field can select properties that Google shows, or properties that are omitted in google search results. The `matchStatus` field can be used to filter the list of HotelViews returned for the account. Examples of valid conditions and their syntax are as follows: * `hotelId = 'hotel_ABC'` * `hotelId in ('hotel_ABC', 'hotel_XYZ')` * `liveOnGoogle = 'TRUE'` * `liveOnGoogle = 'FALSE'` * `matchStatus = 'NOT_MATCHED'` * `matchStatus in ('NOT_MATCHED', 'MATCHED', 'MAP_OVERLAP')`",
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "pageSize": {
	//       "description": "Number of elements to retrieve in a single page.",
	//       "format": "int32",
	//       "location": "query",
	//       "type": "integer"
	//     },
	//     "pageToken": {
	//       "description": "Token of the page to retrieve.",
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "parent": {
	//       "description": "The resource name of the account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/hotelViews",
	//   "response": {
	//     "$ref": "ListHotelViewsResponse"
	//   }
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *AccountsHotelViewsListCall) Pages(ctx context.Context, f func(*ListHotelViewsResponse) error) error {
	c.ctx_ = ctx
	defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.PageToken(x.NextPageToken)
	}
}

// method id "travelpartner.accounts.hotelViews.summarize":

type AccountsHotelViewsSummarizeCall struct {
	s            *Service
	parent       string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Summarize: Returns summarized information about hotels.
//
//   - parent: The resource name of the account being queried. The format
//     is `accounts/{account_id}`.
func (r *AccountsHotelViewsService) Summarize(parent string) *AccountsHotelViewsSummarizeCall {
	c := &AccountsHotelViewsSummarizeCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsHotelViewsSummarizeCall) Fields(s ...googleapi.Field) *AccountsHotelViewsSummarizeCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsHotelViewsSummarizeCall) IfNoneMatch(entityTag string) *AccountsHotelViewsSummarizeCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsHotelViewsSummarizeCall) Context(ctx context.Context) *AccountsHotelViewsSummarizeCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsHotelViewsSummarizeCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsHotelViewsSummarizeCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/hotelViews:summarize")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.hotelViews.summarize" call.
// Exactly one of *SummarizeHotelViewsResponse or error will be non-nil.
// Any non-2xx status code is an error. Response headers are in either
// *SummarizeHotelViewsResponse.ServerResponse.Header or (if a response
// was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsHotelViewsSummarizeCall) Do(opts ...googleapi.CallOption) (*SummarizeHotelViewsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &SummarizeHotelViewsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns summarized information about hotels.",
	//   "flatPath": "v3/accounts/{accountsId}/hotelViews:summarize",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.hotelViews.summarize",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "The resource name of the account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/hotelViews:summarize",
	//   "response": {
	//     "$ref": "SummarizeHotelViewsResponse"
	//   }
	// }

}

// method id "travelpartner.accounts.hotels.setLiveOnGoogle":

type AccountsHotelsSetLiveOnGoogleCall struct {
	s                      *Service
	account                string
	setliveongooglerequest *SetLiveOnGoogleRequest
	urlParams_             gensupport.URLParams
	ctx_                   context.Context
	header_                http.Header
}

// SetLiveOnGoogle: Collection-level custom method to update the Live on
// Google status for multiple properties. Each call can turn on or off
// multiple hotels. To turn some hotels on and turn some hotels off, you
// will have to make multiple calls.
//
//   - account: The resource name of the account. The format is
//     accounts/{account_id}.
func (r *AccountsHotelsService) SetLiveOnGoogle(account string, setliveongooglerequest *SetLiveOnGoogleRequest) *AccountsHotelsSetLiveOnGoogleCall {
	c := &AccountsHotelsSetLiveOnGoogleCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.account = account
	c.setliveongooglerequest = setliveongooglerequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsHotelsSetLiveOnGoogleCall) Fields(s ...googleapi.Field) *AccountsHotelsSetLiveOnGoogleCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsHotelsSetLiveOnGoogleCall) Context(ctx context.Context) *AccountsHotelsSetLiveOnGoogleCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsHotelsSetLiveOnGoogleCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsHotelsSetLiveOnGoogleCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.setliveongooglerequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+account}/hotels:setLiveOnGoogle")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("POST", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"account": c.account,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.hotels.setLiveOnGoogle" call.
// Exactly one of *SetLiveOnGoogleResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *SetLiveOnGoogleResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsHotelsSetLiveOnGoogleCall) Do(opts ...googleapi.CallOption) (*SetLiveOnGoogleResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &SetLiveOnGoogleResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Collection-level custom method to update the Live on Google status for multiple properties. Each call can turn on or off multiple hotels. To turn some hotels on and turn some hotels off, you will have to make multiple calls.",
	//   "flatPath": "v3/accounts/{accountsId}/hotels:setLiveOnGoogle",
	//   "httpMethod": "POST",
	//   "id": "travelpartner.accounts.hotels.setLiveOnGoogle",
	//   "parameterOrder": [
	//     "account"
	//   ],
	//   "parameters": {
	//     "account": {
	//       "description": "Required. The resource name of the account. The format is accounts/{account_id}.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+account}/hotels:setLiveOnGoogle",
	//   "request": {
	//     "$ref": "SetLiveOnGoogleRequest"
	//   },
	//   "response": {
	//     "$ref": "SetLiveOnGoogleResponse"
	//   }
	// }

}

// method id "travelpartner.accounts.icons.create":

type AccountsIconsCreateCall struct {
	s          *Service
	parent     string
	icon       *Icon
	urlParams_ gensupport.URLParams
	ctx_       context.Context
	header_    http.Header
}

// Create: Uploads a new icon and starts its review process. Generates
// an `icon_id` and includes it in the icon's resource name, which is
// the format `accounts/{account_id}/icons/{icon_id}` Returns HTTP
// status 400 and doesn't trigger the review process if the icon has any
// of these conditions: * Image is not in PNG format, or not convertible
// to PNG format. * Size less than 72 pixels * Size greater than 1200
// pixels * Aspect ratio other than 1:1
//
//   - parent: The resource name of the partner account owning the icon.
//     The format is `accounts/{account_id}`.
func (r *AccountsIconsService) Create(parent string, icon *Icon) *AccountsIconsCreateCall {
	c := &AccountsIconsCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	c.icon = icon
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsIconsCreateCall) Fields(s ...googleapi.Field) *AccountsIconsCreateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsIconsCreateCall) Context(ctx context.Context) *AccountsIconsCreateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsIconsCreateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsIconsCreateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.icon)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/icons")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("POST", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.icons.create" call.
// Exactly one of *Icon or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Icon.ServerResponse.Header or (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *AccountsIconsCreateCall) Do(opts ...googleapi.CallOption) (*Icon, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &Icon{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Uploads a new icon and starts its review process. Generates an `icon_id` and includes it in the icon's resource name, which is the format `accounts/{account_id}/icons/{icon_id}` Returns HTTP status 400 and doesn't trigger the review process if the icon has any of these conditions: * Image is not in PNG format, or not convertible to PNG format. * Size less than 72 pixels * Size greater than 1200 pixels * Aspect ratio other than 1:1",
	//   "flatPath": "v3/accounts/{accountsId}/icons",
	//   "httpMethod": "POST",
	//   "id": "travelpartner.accounts.icons.create",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "Required. The resource name of the partner account owning the icon. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/icons",
	//   "request": {
	//     "$ref": "Icon"
	//   },
	//   "response": {
	//     "$ref": "Icon"
	//   }
	// }

}

// method id "travelpartner.accounts.icons.get":

type AccountsIconsGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Returns the `Icon` instance associated with an icon resource
// name specified in the request URI. To get icon resource names, use
// the `list` method.
//
//   - name: The icon's resource name. The format is
//     `accounts/{account_id}/icons/{icon_id}`.
func (r *AccountsIconsService) Get(name string) *AccountsIconsGetCall {
	c := &AccountsIconsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsIconsGetCall) Fields(s ...googleapi.Field) *AccountsIconsGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsIconsGetCall) IfNoneMatch(entityTag string) *AccountsIconsGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsIconsGetCall) Context(ctx context.Context) *AccountsIconsGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsIconsGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsIconsGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.icons.get" call.
// Exactly one of *Icon or error will be non-nil. Any non-2xx status
// code is an error. Response headers are in either
// *Icon.ServerResponse.Header or (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *AccountsIconsGetCall) Do(opts ...googleapi.CallOption) (*Icon, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &Icon{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns the `Icon` instance associated with an icon resource name specified in the request URI. To get icon resource names, use the `list` method.",
	//   "flatPath": "v3/accounts/{accountsId}/icons/{iconsId}",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.icons.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "description": "Required. The icon's resource name. The format is `accounts/{account_id}/icons/{icon_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+/icons/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+name}",
	//   "response": {
	//     "$ref": "Icon"
	//   }
	// }

}

// method id "travelpartner.accounts.icons.list":

type AccountsIconsListCall struct {
	s            *Service
	parent       string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Returns the `Icon`s for a partner account.
//
//   - parent: The resource name of the queried partner account. The
//     format is `accounts/{account_id}`.
func (r *AccountsIconsService) List(parent string) *AccountsIconsListCall {
	c := &AccountsIconsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsIconsListCall) Fields(s ...googleapi.Field) *AccountsIconsListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsIconsListCall) IfNoneMatch(entityTag string) *AccountsIconsListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsIconsListCall) Context(ctx context.Context) *AccountsIconsListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsIconsListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsIconsListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/icons")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.icons.list" call.
// Exactly one of *ListIconsResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ListIconsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsIconsListCall) Do(opts ...googleapi.CallOption) (*ListIconsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &ListIconsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns the `Icon`s for a partner account.",
	//   "flatPath": "v3/accounts/{accountsId}/icons",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.icons.list",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "Required. The resource name of the queried partner account. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/icons",
	//   "response": {
	//     "$ref": "ListIconsResponse"
	//   }
	// }

}

// method id "travelpartner.accounts.listings.verify":

type AccountsListingsVerifyCall struct {
	s                     *Service
	parent                string
	verifylistingsrequest *VerifyListingsRequest
	urlParams_            gensupport.URLParams
	ctx_                  context.Context
	header_               http.Header
}

// Verify: Returns verified listings with data issues and serving
// eligibilities.
//
//   - parent: The resource name of the account being queried. The format
//     is `accounts/{account_id}`.
func (r *AccountsListingsService) Verify(parent string, verifylistingsrequest *VerifyListingsRequest) *AccountsListingsVerifyCall {
	c := &AccountsListingsVerifyCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	c.verifylistingsrequest = verifylistingsrequest
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsListingsVerifyCall) Fields(s ...googleapi.Field) *AccountsListingsVerifyCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsListingsVerifyCall) Context(ctx context.Context) *AccountsListingsVerifyCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsListingsVerifyCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsListingsVerifyCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.verifylistingsrequest)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/listings:verify")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("POST", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.listings.verify" call.
// Exactly one of *VerifyListingsResponse or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *VerifyListingsResponse.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsListingsVerifyCall) Do(opts ...googleapi.CallOption) (*VerifyListingsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &VerifyListingsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns verified listings with data issues and serving eligibilities.",
	//   "flatPath": "v3/accounts/{accountsId}/listings:verify",
	//   "httpMethod": "POST",
	//   "id": "travelpartner.accounts.listings.verify",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "The resource name of the account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/listings:verify",
	//   "request": {
	//     "$ref": "VerifyListingsRequest"
	//   },
	//   "response": {
	//     "$ref": "VerifyListingsResponse"
	//   }
	// }

}

// method id "travelpartner.accounts.participationReportViews.query":

type AccountsParticipationReportViewsQueryCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Query: Provides the ability to query (get, filter, and segment) a
// participation report for a particular account.
//
//   - name: The resource name of the account being queried. The format is
//     `accounts/{account_id}`.
func (r *AccountsParticipationReportViewsService) Query(name string) *AccountsParticipationReportViewsQueryCall {
	c := &AccountsParticipationReportViewsQueryCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// AggregateBy sets the optional parameter "aggregateBy": Specifies how
// to segment the metrics returned by the query. For example, if
// `userRegionCode` is specified as the `aggregate_by` value, the
// `participationResult` will provide metrics aggregated by user region.
// The string value is a comma-separated list of fields. Valid fields
// are: `date`, `userRegionCode`, `deviceType`, `partnerHotelId`,
// `hotelRegionCode`, `advanceBookingWindow`, `lengthOfStayDays`,
// `checkinDate`, and `occupancy`. Fields that are not specified are not
// included in the ParticipationResult. **Important**: Using the
// `aggregateBy` parameter with `partnerHotelId` or more than two values
// can result in an error. Filtering with `partnerHotelId` and `date` to
// reduce the number of rows can prevent the occurrence of errors.
func (c *AccountsParticipationReportViewsQueryCall) AggregateBy(aggregateBy string) *AccountsParticipationReportViewsQueryCall {
	c.urlParams_.Set("aggregateBy", aggregateBy)
	return c
}

// Filter sets the optional parameter "filter": The conditions (fields
// and expressions) used to filter the participation metrics for the
// account being queried. The syntax requires spaces surrounding the
// `in` operator. Otherwise, spaces can be omitted. Conditions can be
// joined using the `AND` operator. **Important:** The correct syntax to
// add multiple conditions is: "?filter==%20AND%20=..." The `date`
// field is required. All other fields are optional. Examples of valid
// conditions are as follows: * `advanceBookingWindow = 2` *
// `advanceBookingWindow >= 0` * `advanceBookingWindow <= 5` *
// `advanceBookingWindow between 1 and 5` * `checkinDate = '2020-10-01'`
// * `checkinDate >= '2020-10-01'` * `checkinDate <= '2020-10-01'` *
// `checkinDate between '2020-10-01' and '2020-10-05'` * `date =
// '2020-02-04'` * `date between '2020-02-04' and '2020-02-09'` *
// `deviceType = 'TABLET'` * `deviceType in ('MOBILE', 'TABLET')` *
// `hotelRegionCode = 'US'` * `hotelRegionCode in ('US', 'CA')` *
// `lengthOfStayDays = 2` * `lengthOfStayDays >= 0` * `lengthOfStayDays
// <= 5` * `lengthOfStayDays between 1 and 5` * `occupancy = 2` *
// `occupancy >= 0` * `occupancy <= 5` * `occupancy between 1 and 5` *
// `partnerHotelId = 'AAA'` * `partnerHotelId in ('AAA', 'BBB')` *
// `userRegionCode = 'US'` * `userRegionCode in ('US', 'CA')`
func (c *AccountsParticipationReportViewsQueryCall) Filter(filter string) *AccountsParticipationReportViewsQueryCall {
	c.urlParams_.Set("filter", filter)
	return c
}

// PageSize sets the optional parameter "pageSize": The maximum number
// of participation results to return. The service may return fewer than
// this value. If unspecified, at most 10,000 results will be returned.
// The maximum value is 10,000; values above 10,000 will be coerced to
// 10,000.
func (c *AccountsParticipationReportViewsQueryCall) PageSize(pageSize int64) *AccountsParticipationReportViewsQueryCall {
	c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
	return c
}

// PageToken sets the optional parameter "pageToken": A page token,
// received from a previous QueryParticipationReport request. Provide
// this to receive the subsequent page. When paginating, all other
// parameters provided to QueryParticipationReport must match the call
// that provided the page token.
func (c *AccountsParticipationReportViewsQueryCall) PageToken(pageToken string) *AccountsParticipationReportViewsQueryCall {
	c.urlParams_.Set("pageToken", pageToken)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsParticipationReportViewsQueryCall) Fields(s ...googleapi.Field) *AccountsParticipationReportViewsQueryCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsParticipationReportViewsQueryCall) IfNoneMatch(entityTag string) *AccountsParticipationReportViewsQueryCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsParticipationReportViewsQueryCall) Context(ctx context.Context) *AccountsParticipationReportViewsQueryCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsParticipationReportViewsQueryCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsParticipationReportViewsQueryCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}/participationReportViews:query")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.participationReportViews.query" call.
// Exactly one of *QueryParticipationReportResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *QueryParticipationReportResponse.ServerResponse.Header or (if
// a response was returned at all) in error.(*googleapi.Error).Header.
// Use googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsParticipationReportViewsQueryCall) Do(opts ...googleapi.CallOption) (*QueryParticipationReportResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &QueryParticipationReportResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Provides the ability to query (get, filter, and segment) a participation report for a particular account.",
	//   "flatPath": "v3/accounts/{accountsId}/participationReportViews:query",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.participationReportViews.query",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "aggregateBy": {
	//       "description": "Specifies how to segment the metrics returned by the query. For example, if `userRegionCode` is specified as the `aggregate_by` value, the `participationResult` will provide metrics aggregated by user region. The string value is a comma-separated list of fields. Valid fields are: `date`, `userRegionCode`, `deviceType`, `partnerHotelId`, `hotelRegionCode`, `advanceBookingWindow`, `lengthOfStayDays`, `checkinDate`, and `occupancy`. Fields that are not specified are not included in the ParticipationResult. **Important**: Using the `aggregateBy` parameter with `partnerHotelId` or more than two values can result in an error. Filtering with `partnerHotelId` and `date` to reduce the number of rows can prevent the occurrence of errors.",
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "filter": {
	//       "description": "The conditions (fields and expressions) used to filter the participation metrics for the account being queried. The syntax requires spaces surrounding the `in` operator. Otherwise, spaces can be omitted. Conditions can be joined using the `AND` operator. **Important:** The correct syntax to add multiple conditions is: `\"?filter==%20AND%20=...\"` The `date` field is required. All other fields are optional. Examples of valid conditions are as follows: * `advanceBookingWindow = 2` * `advanceBookingWindow \u003e= 0` * `advanceBookingWindow \u003c= 5` * `advanceBookingWindow between 1 and 5` * `checkinDate = '2020-10-01'` * `checkinDate \u003e= '2020-10-01'` * `checkinDate \u003c= '2020-10-01'` * `checkinDate between '2020-10-01' and '2020-10-05'` * `date = '2020-02-04'` * `date between '2020-02-04' and '2020-02-09'` * `deviceType = 'TABLET'` * `deviceType in ('MOBILE', 'TABLET')` * `hotelRegionCode = 'US'` * `hotelRegionCode in ('US', 'CA')` * `lengthOfStayDays = 2` * `lengthOfStayDays \u003e= 0` * `lengthOfStayDays \u003c= 5` * `lengthOfStayDays between 1 and 5` * `occupancy = 2` * `occupancy \u003e= 0` * `occupancy \u003c= 5` * `occupancy between 1 and 5` * `partnerHotelId = 'AAA'` * `partnerHotelId in ('AAA', 'BBB')` * `userRegionCode = 'US'` * `userRegionCode in ('US', 'CA')`",
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "name": {
	//       "description": "The resource name of the account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     },
	//     "pageSize": {
	//       "description": "The maximum number of participation results to return. The service may return fewer than this value. If unspecified, at most 10,000 results will be returned. The maximum value is 10,000; values above 10,000 will be coerced to 10,000.",
	//       "format": "int32",
	//       "location": "query",
	//       "type": "integer"
	//     },
	//     "pageToken": {
	//       "description": "A page token, received from a previous QueryParticipationReport request. Provide this to receive the subsequent page. When paginating, all other parameters provided to QueryParticipationReport must match the call that provided the page token.",
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+name}/participationReportViews:query",
	//   "response": {
	//     "$ref": "QueryParticipationReportResponse"
	//   }
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *AccountsParticipationReportViewsQueryCall) Pages(ctx context.Context, f func(*QueryParticipationReportResponse) error) error {
	c.ctx_ = ctx
	defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.PageToken(x.NextPageToken)
	}
}

// method id "travelpartner.accounts.priceAccuracyViews.get":

type AccountsPriceAccuracyViewsGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Returns the requested price accuracy view in full detail.
//
//   - name: The resource name of price accuracy view that is being
//     queried.
func (r *AccountsPriceAccuracyViewsService) Get(name string) *AccountsPriceAccuracyViewsGetCall {
	c := &AccountsPriceAccuracyViewsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// IncludeMatchedPrices sets the optional parameter
// "includeMatchedPrices": Set to true if matched prices are to be added
// into the report.
func (c *AccountsPriceAccuracyViewsGetCall) IncludeMatchedPrices(includeMatchedPrices bool) *AccountsPriceAccuracyViewsGetCall {
	c.urlParams_.Set("includeMatchedPrices", fmt.Sprint(includeMatchedPrices))
	return c
}

// IncludeNonScoring sets the optional parameter "includeNonScoring":
// Set to true if non-scoring rows are to be added into the report.
func (c *AccountsPriceAccuracyViewsGetCall) IncludeNonScoring(includeNonScoring bool) *AccountsPriceAccuracyViewsGetCall {
	c.urlParams_.Set("includeNonScoring", fmt.Sprint(includeNonScoring))
	return c
}

// IncludePixels sets the optional parameter "includePixels": Set to
// true if pixel signals are to be added into the report.
func (c *AccountsPriceAccuracyViewsGetCall) IncludePixels(includePixels bool) *AccountsPriceAccuracyViewsGetCall {
	c.urlParams_.Set("includePixels", fmt.Sprint(includePixels))
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsPriceAccuracyViewsGetCall) Fields(s ...googleapi.Field) *AccountsPriceAccuracyViewsGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsPriceAccuracyViewsGetCall) IfNoneMatch(entityTag string) *AccountsPriceAccuracyViewsGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsPriceAccuracyViewsGetCall) Context(ctx context.Context) *AccountsPriceAccuracyViewsGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsPriceAccuracyViewsGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsPriceAccuracyViewsGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.priceAccuracyViews.get" call.
// Exactly one of *PriceAccuracyView or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *PriceAccuracyView.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsPriceAccuracyViewsGetCall) Do(opts ...googleapi.CallOption) (*PriceAccuracyView, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &PriceAccuracyView{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns the requested price accuracy view in full detail.",
	//   "flatPath": "v3/accounts/{accountsId}/priceAccuracyViews/{priceAccuracyViewsId}",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.priceAccuracyViews.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "includeMatchedPrices": {
	//       "description": "Set to true if matched prices are to be added into the report.",
	//       "location": "query",
	//       "type": "boolean"
	//     },
	//     "includeNonScoring": {
	//       "description": "Set to true if non-scoring rows are to be added into the report.",
	//       "location": "query",
	//       "type": "boolean"
	//     },
	//     "includePixels": {
	//       "description": "Set to true if pixel signals are to be added into the report.",
	//       "location": "query",
	//       "type": "boolean"
	//     },
	//     "name": {
	//       "description": "The resource name of price accuracy view that is being queried.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+/priceAccuracyViews/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+name}",
	//   "response": {
	//     "$ref": "PriceAccuracyView"
	//   }
	// }

}

// method id "travelpartner.accounts.priceAccuracyViews.list":

type AccountsPriceAccuracyViewsListCall struct {
	s            *Service
	parent       string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Lists the available price accuracy views.
//
//   - parent: The resource name of the account being queried. The format
//     is `accounts/{account_id}`.
func (r *AccountsPriceAccuracyViewsService) List(parent string) *AccountsPriceAccuracyViewsListCall {
	c := &AccountsPriceAccuracyViewsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsPriceAccuracyViewsListCall) Fields(s ...googleapi.Field) *AccountsPriceAccuracyViewsListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsPriceAccuracyViewsListCall) IfNoneMatch(entityTag string) *AccountsPriceAccuracyViewsListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsPriceAccuracyViewsListCall) Context(ctx context.Context) *AccountsPriceAccuracyViewsListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsPriceAccuracyViewsListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsPriceAccuracyViewsListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/priceAccuracyViews")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.priceAccuracyViews.list" call.
// Exactly one of *ListPriceAccuracyViewsResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *ListPriceAccuracyViewsResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsPriceAccuracyViewsListCall) Do(opts ...googleapi.CallOption) (*ListPriceAccuracyViewsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &ListPriceAccuracyViewsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Lists the available price accuracy views.",
	//   "flatPath": "v3/accounts/{accountsId}/priceAccuracyViews",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.priceAccuracyViews.list",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "The resource name of the account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/priceAccuracyViews",
	//   "response": {
	//     "$ref": "ListPriceAccuracyViewsResponse"
	//   }
	// }

}

// method id "travelpartner.accounts.priceAccuracyViews.summarize":

type AccountsPriceAccuracyViewsSummarizeCall struct {
	s            *Service
	parent       string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Summarize: Returns the price accuracy summary.
//
//   - parent: The resource name of the account that is being queried. The
//     format is `accounts/{account_id}`.
func (r *AccountsPriceAccuracyViewsService) Summarize(parent string) *AccountsPriceAccuracyViewsSummarizeCall {
	c := &AccountsPriceAccuracyViewsSummarizeCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsPriceAccuracyViewsSummarizeCall) Fields(s ...googleapi.Field) *AccountsPriceAccuracyViewsSummarizeCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsPriceAccuracyViewsSummarizeCall) IfNoneMatch(entityTag string) *AccountsPriceAccuracyViewsSummarizeCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsPriceAccuracyViewsSummarizeCall) Context(ctx context.Context) *AccountsPriceAccuracyViewsSummarizeCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsPriceAccuracyViewsSummarizeCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsPriceAccuracyViewsSummarizeCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/priceAccuracyViews:summarize")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.priceAccuracyViews.summarize" call.
// Exactly one of *SummarizePriceAccuracyResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *SummarizePriceAccuracyResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsPriceAccuracyViewsSummarizeCall) Do(opts ...googleapi.CallOption) (*SummarizePriceAccuracyResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &SummarizePriceAccuracyResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns the price accuracy summary.",
	//   "flatPath": "v3/accounts/{accountsId}/priceAccuracyViews:summarize",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.priceAccuracyViews.summarize",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "The resource name of the account that is being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/priceAccuracyViews:summarize",
	//   "response": {
	//     "$ref": "SummarizePriceAccuracyResponse"
	//   }
	// }

}

// method id "travelpartner.accounts.priceCoverageViews.getLatest":

type AccountsPriceCoverageViewsGetLatestCall struct {
	s            *Service
	parent       string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// GetLatest: Returns the latest price coverage view in full detail.
//
//   - parent: The resource name of the account being queried. The format
//     is `accounts/{account_id}`.
func (r *AccountsPriceCoverageViewsService) GetLatest(parent string) *AccountsPriceCoverageViewsGetLatestCall {
	c := &AccountsPriceCoverageViewsGetLatestCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsPriceCoverageViewsGetLatestCall) Fields(s ...googleapi.Field) *AccountsPriceCoverageViewsGetLatestCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsPriceCoverageViewsGetLatestCall) IfNoneMatch(entityTag string) *AccountsPriceCoverageViewsGetLatestCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsPriceCoverageViewsGetLatestCall) Context(ctx context.Context) *AccountsPriceCoverageViewsGetLatestCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsPriceCoverageViewsGetLatestCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsPriceCoverageViewsGetLatestCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/priceCoverageViews:latest")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.priceCoverageViews.getLatest" call.
// Exactly one of *PriceCoverageView or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *PriceCoverageView.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsPriceCoverageViewsGetLatestCall) Do(opts ...googleapi.CallOption) (*PriceCoverageView, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &PriceCoverageView{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns the latest price coverage view in full detail.",
	//   "flatPath": "v3/accounts/{accountsId}/priceCoverageViews:latest",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.priceCoverageViews.getLatest",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "The resource name of the account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/priceCoverageViews:latest",
	//   "response": {
	//     "$ref": "PriceCoverageView"
	//   }
	// }

}

// method id "travelpartner.accounts.priceCoverageViews.list":

type AccountsPriceCoverageViewsListCall struct {
	s            *Service
	parent       string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Returns the entire price coverage history.
//
//   - parent: The resource name of the account being queried. The format
//     is `accounts/{account_id}`.
func (r *AccountsPriceCoverageViewsService) List(parent string) *AccountsPriceCoverageViewsListCall {
	c := &AccountsPriceCoverageViewsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsPriceCoverageViewsListCall) Fields(s ...googleapi.Field) *AccountsPriceCoverageViewsListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsPriceCoverageViewsListCall) IfNoneMatch(entityTag string) *AccountsPriceCoverageViewsListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsPriceCoverageViewsListCall) Context(ctx context.Context) *AccountsPriceCoverageViewsListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsPriceCoverageViewsListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsPriceCoverageViewsListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/priceCoverageViews")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.priceCoverageViews.list" call.
// Exactly one of *ListPriceCoverageViewsResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *ListPriceCoverageViewsResponse.ServerResponse.Header or (if a
// response was returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsPriceCoverageViewsListCall) Do(opts ...googleapi.CallOption) (*ListPriceCoverageViewsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &ListPriceCoverageViewsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns the entire price coverage history.",
	//   "flatPath": "v3/accounts/{accountsId}/priceCoverageViews",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.priceCoverageViews.list",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "The resource name of the account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/priceCoverageViews",
	//   "response": {
	//     "$ref": "ListPriceCoverageViewsResponse"
	//   }
	// }

}

// method id "travelpartner.accounts.priceViews.get":

type AccountsPriceViewsGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Returns the requested price view in full detail.
//
//   - name: The resource name of price view being queried. The format is
//     `accounts/{account_id}/priceViews/{partner_hotel_id}`.
func (r *AccountsPriceViewsService) Get(name string) *AccountsPriceViewsGetCall {
	c := &AccountsPriceViewsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsPriceViewsGetCall) Fields(s ...googleapi.Field) *AccountsPriceViewsGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsPriceViewsGetCall) IfNoneMatch(entityTag string) *AccountsPriceViewsGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsPriceViewsGetCall) Context(ctx context.Context) *AccountsPriceViewsGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsPriceViewsGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsPriceViewsGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.priceViews.get" call.
// Exactly one of *PriceView or error will be non-nil. Any non-2xx
// status code is an error. Response headers are in either
// *PriceView.ServerResponse.Header or (if a response was returned at
// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
// to check whether the returned error was because
// http.StatusNotModified was returned.
func (c *AccountsPriceViewsGetCall) Do(opts ...googleapi.CallOption) (*PriceView, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &PriceView{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns the requested price view in full detail.",
	//   "flatPath": "v3/accounts/{accountsId}/priceViews/{priceViewsId}",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.priceViews.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "description": "The resource name of price view being queried. The format is `accounts/{account_id}/priceViews/{partner_hotel_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+/priceViews/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+name}",
	//   "response": {
	//     "$ref": "PriceView"
	//   }
	// }

}

// method id "travelpartner.accounts.propertyPerformanceReportViews.query":

type AccountsPropertyPerformanceReportViewsQueryCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Query: Provides the ability to query (get, filter, and segment) a
// property performance links report for a specific account.
//
//   - name: The resource name of the account being queried. Format:
//     accounts/{account_id}.
func (r *AccountsPropertyPerformanceReportViewsService) Query(name string) *AccountsPropertyPerformanceReportViewsQueryCall {
	c := &AccountsPropertyPerformanceReportViewsQueryCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// AggregateBy sets the optional parameter "aggregateBy": Specifies how
// to segment the metrics returned by the query. For example, if
// `userRegionCode` is specified, the `PropertyPerformanceResult` will
// provide metrics aggregated by user region. The string value is a
// comma-separated list of fields. Valid fields are:
// `advanceBookingWindow`, `brand`, `date`, `deviceType`,
// `highIntentUsers`, `lengthOfStay`, `propertyRegionCode`, `occupancy`,
// `partnerPropertyId`, `partnerPropertyDisplayName`, and
// `userRegionCode`. Only fields specified here are included in the
// PropertyPerformanceResult. **Important**: Using the `aggregateBy`
// parameter with `partnerHotelId` or more than two values can result in
// an error. Filtering with `partnerHotelId` and `date` to reduce the
// number of rows can prevent the occurrence of errors.
func (c *AccountsPropertyPerformanceReportViewsQueryCall) AggregateBy(aggregateBy string) *AccountsPropertyPerformanceReportViewsQueryCall {
	c.urlParams_.Set("aggregateBy", aggregateBy)
	return c
}

// Filter sets the optional parameter "filter": The conditions (fields
// and expressions) used to filter the property performance metrics for
// the account being queried. The syntax requires spaces surrounding the
// `in` operator. Otherwise, spaces can be omitted. Conditions can be
// joined using the `AND` operator. **Important:** The correct syntax to
// add multiple conditions is: "?filter==%20AND%20=..." The `date`
// field is required. All other fields are optional. The `date` field
// values are inclusive and must be in YYYY-MM-DD format. The earliest
// acceptable date is 2021-03-09; earlier date values will be coerced to
// 2021-03-09. Values for `partnerPropertyDisplayName` and `brand` are
// matched case-insensitively. Examples of valid conditions are as
// follows: * `advanceBookingWindow = 'ADVANCE_BOOKING_WINDOW_SAME_DAY'`
// * `advanceBookingWindow in ('ADVANCE_BOOKING_WINDOW_SAME_DAY',
// 'ADVANCE_BOOKING_WINDOW_DAYS_61_TO_90')` * `brand = 'Brand A'` *
// `brand in ('Brand A', 'brand B')` * `date = '2021-12-03'` * `date
// between '2021-12-03' and '2021-12-08'` * `deviceType = 'TABLET'` *
// `deviceType in ('MOBILE', 'TABLET')` * `highIntentUsers = 'TRUE'` *
// `highIntentUsers = 'FALSE'` * `lengthOfStay =
// 'LENGTH_OF_STAY_NIGHTS_2'` * `lengthOfStay in
// ('LENGTH_OF_STAY_NIGHTS_2', 'LENGTH_OF_STAY_NIGHTS_4_TO_7')` *
// `propertyRegionCode = 'US'` * `propertyRegionCode in ('US', 'CA')` *
// `occupancy = 'OCCUPANCY_2'` * `occupancy in ('OCCUPANCY_2',
// 'OCCUPANCY_OVER_4')` * `partnerPropertyId = 'AAA'` *
// `partnerPropertyId in ('AAA', 'BBB')` * `partnerPropertyDisplayName =
// 'hotel A'` * `partnerPropertyDisplayName in ('Hotel A', 'HOTEL b')` *
// `userRegionCode = 'US'` * `userRegionCode in ('US', 'CA')`
func (c *AccountsPropertyPerformanceReportViewsQueryCall) Filter(filter string) *AccountsPropertyPerformanceReportViewsQueryCall {
	c.urlParams_.Set("filter", filter)
	return c
}

// PageSize sets the optional parameter "pageSize": The maximum number
// of participation results to return. The service may return fewer than
// this value. If unspecified, at most 10,000 results will be returned.
// The maximum value is 10,000; values above 10,000 will be coerced to
// 10,000.
func (c *AccountsPropertyPerformanceReportViewsQueryCall) PageSize(pageSize int64) *AccountsPropertyPerformanceReportViewsQueryCall {
	c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
	return c
}

// PageToken sets the optional parameter "pageToken": A page token,
// received from a previous QueryParticipationReport request. Provide
// this to receive the subsequent page. When paginating, all other
// parameters provided to QueryParticipationReport must match the call
// that provided the page token.
func (c *AccountsPropertyPerformanceReportViewsQueryCall) PageToken(pageToken string) *AccountsPropertyPerformanceReportViewsQueryCall {
	c.urlParams_.Set("pageToken", pageToken)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsPropertyPerformanceReportViewsQueryCall) Fields(s ...googleapi.Field) *AccountsPropertyPerformanceReportViewsQueryCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsPropertyPerformanceReportViewsQueryCall) IfNoneMatch(entityTag string) *AccountsPropertyPerformanceReportViewsQueryCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsPropertyPerformanceReportViewsQueryCall) Context(ctx context.Context) *AccountsPropertyPerformanceReportViewsQueryCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsPropertyPerformanceReportViewsQueryCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsPropertyPerformanceReportViewsQueryCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}/propertyPerformanceReportViews:query")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.propertyPerformanceReportViews.query" call.
// Exactly one of *QueryPropertyPerformanceReportResponse or error will
// be non-nil. Any non-2xx status code is an error. Response headers are
// in either
// *QueryPropertyPerformanceReportResponse.ServerResponse.Header or (if
// a response was returned at all) in error.(*googleapi.Error).Header.
// Use googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsPropertyPerformanceReportViewsQueryCall) Do(opts ...googleapi.CallOption) (*QueryPropertyPerformanceReportResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &QueryPropertyPerformanceReportResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Provides the ability to query (get, filter, and segment) a property performance links report for a specific account.",
	//   "flatPath": "v3/accounts/{accountsId}/propertyPerformanceReportViews:query",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.propertyPerformanceReportViews.query",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "aggregateBy": {
	//       "description": "Specifies how to segment the metrics returned by the query. For example, if `userRegionCode` is specified, the `PropertyPerformanceResult` will provide metrics aggregated by user region. The string value is a comma-separated list of fields. Valid fields are: `advanceBookingWindow`, `brand`, `date`, `deviceType`, `highIntentUsers`, `lengthOfStay`, `propertyRegionCode`, `occupancy`, `partnerPropertyId`, `partnerPropertyDisplayName`, and `userRegionCode`. Only fields specified here are included in the PropertyPerformanceResult. **Important**: Using the `aggregateBy` parameter with `partnerHotelId` or more than two values can result in an error. Filtering with `partnerHotelId` and `date` to reduce the number of rows can prevent the occurrence of errors.",
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "filter": {
	//       "description": "The conditions (fields and expressions) used to filter the property performance metrics for the account being queried. The syntax requires spaces surrounding the `in` operator. Otherwise, spaces can be omitted. Conditions can be joined using the `AND` operator. **Important:** The correct syntax to add multiple conditions is: `\"?filter==%20AND%20=...\"` The `date` field is required. All other fields are optional. The `date` field values are inclusive and must be in YYYY-MM-DD format. The earliest acceptable date is 2021-03-09; earlier date values will be coerced to 2021-03-09. Values for `partnerPropertyDisplayName` and `brand` are matched case-insensitively. Examples of valid conditions are as follows: * `advanceBookingWindow = 'ADVANCE_BOOKING_WINDOW_SAME_DAY'` * `advanceBookingWindow in ('ADVANCE_BOOKING_WINDOW_SAME_DAY', 'ADVANCE_BOOKING_WINDOW_DAYS_61_TO_90')` * `brand = 'Brand A'` * `brand in ('Brand A', 'brand B')` * `date = '2021-12-03'` * `date between '2021-12-03' and '2021-12-08'` * `deviceType = 'TABLET'` * `deviceType in ('MOBILE', 'TABLET')` * `highIntentUsers = 'TRUE'` * `highIntentUsers = 'FALSE'` * `lengthOfStay = 'LENGTH_OF_STAY_NIGHTS_2'` * `lengthOfStay in ('LENGTH_OF_STAY_NIGHTS_2', 'LENGTH_OF_STAY_NIGHTS_4_TO_7')` * `propertyRegionCode = 'US'` * `propertyRegionCode in ('US', 'CA')` * `occupancy = 'OCCUPANCY_2'` * `occupancy in ('OCCUPANCY_2', 'OCCUPANCY_OVER_4')` * `partnerPropertyId = 'AAA'` * `partnerPropertyId in ('AAA', 'BBB')` * `partnerPropertyDisplayName = 'hotel A'` * `partnerPropertyDisplayName in ('Hotel A', 'HOTEL b')` * `userRegionCode = 'US'` * `userRegionCode in ('US', 'CA')`",
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "name": {
	//       "description": "The resource name of the account being queried. Format: accounts/{account_id}",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     },
	//     "pageSize": {
	//       "description": "The maximum number of participation results to return. The service may return fewer than this value. If unspecified, at most 10,000 results will be returned. The maximum value is 10,000; values above 10,000 will be coerced to 10,000.",
	//       "format": "int32",
	//       "location": "query",
	//       "type": "integer"
	//     },
	//     "pageToken": {
	//       "description": "A page token, received from a previous QueryParticipationReport request. Provide this to receive the subsequent page. When paginating, all other parameters provided to QueryParticipationReport must match the call that provided the page token.",
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+name}/propertyPerformanceReportViews:query",
	//   "response": {
	//     "$ref": "QueryPropertyPerformanceReportResponse"
	//   }
	// }

}

// Pages invokes f for each page of results.
// A non-nil error returned from f will halt the iteration.
// The provided context supersedes any context provided to the Context method.
func (c *AccountsPropertyPerformanceReportViewsQueryCall) Pages(ctx context.Context, f func(*QueryPropertyPerformanceReportResponse) error) error {
	c.ctx_ = ctx
	defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
	for {
		x, err := c.Do()
		if err != nil {
			return err
		}
		if err := f(x); err != nil {
			return err
		}
		if x.NextPageToken == "" {
			return nil
		}
		c.PageToken(x.NextPageToken)
	}
}

// method id "travelpartner.accounts.reconciliationReports.create":

type AccountsReconciliationReportsCreateCall struct {
	s                    *Service
	parent               string
	reconciliationreport *ReconciliationReport
	urlParams_           gensupport.URLParams
	ctx_                 context.Context
	header_              http.Header
}

// Create: Creates a reconciliation report and uploads it to Google.
//
//   - parent: The resource name of the account being queried. The format
//     is `accounts/{account_id}`.
func (r *AccountsReconciliationReportsService) Create(parent string, reconciliationreport *ReconciliationReport) *AccountsReconciliationReportsCreateCall {
	c := &AccountsReconciliationReportsCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	c.reconciliationreport = reconciliationreport
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsReconciliationReportsCreateCall) Fields(s ...googleapi.Field) *AccountsReconciliationReportsCreateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsReconciliationReportsCreateCall) Context(ctx context.Context) *AccountsReconciliationReportsCreateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsReconciliationReportsCreateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsReconciliationReportsCreateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.reconciliationreport)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/reconciliationReports")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("POST", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.reconciliationReports.create" call.
// Exactly one of *CreateReconciliationReportResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *CreateReconciliationReportResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *AccountsReconciliationReportsCreateCall) Do(opts ...googleapi.CallOption) (*CreateReconciliationReportResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &CreateReconciliationReportResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Creates a reconciliation report and uploads it to Google.",
	//   "flatPath": "v3/accounts/{accountsId}/reconciliationReports",
	//   "httpMethod": "POST",
	//   "id": "travelpartner.accounts.reconciliationReports.create",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "The resource name of the account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/reconciliationReports",
	//   "request": {
	//     "$ref": "ReconciliationReport"
	//   },
	//   "response": {
	//     "$ref": "CreateReconciliationReportResponse"
	//   }
	// }

}

// method id "travelpartner.accounts.reconciliationReports.get":

type AccountsReconciliationReportsGetCall struct {
	s            *Service
	name         string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// Get: Returns a reconciliation report.
//
//   - name: The resource name of the reconciliation report to fetch. The
//     format is
//     `accounts/{account_id}/reconciliationReports/{datetime}~{filename}`.
func (r *AccountsReconciliationReportsService) Get(name string) *AccountsReconciliationReportsGetCall {
	c := &AccountsReconciliationReportsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.name = name
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsReconciliationReportsGetCall) Fields(s ...googleapi.Field) *AccountsReconciliationReportsGetCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsReconciliationReportsGetCall) IfNoneMatch(entityTag string) *AccountsReconciliationReportsGetCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsReconciliationReportsGetCall) Context(ctx context.Context) *AccountsReconciliationReportsGetCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsReconciliationReportsGetCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsReconciliationReportsGetCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"name": c.name,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.reconciliationReports.get" call.
// Exactly one of *ReconciliationReport or error will be non-nil. Any
// non-2xx status code is an error. Response headers are in either
// *ReconciliationReport.ServerResponse.Header or (if a response was
// returned at all) in error.(*googleapi.Error).Header. Use
// googleapi.IsNotModified to check whether the returned error was
// because http.StatusNotModified was returned.
func (c *AccountsReconciliationReportsGetCall) Do(opts ...googleapi.CallOption) (*ReconciliationReport, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &ReconciliationReport{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns a reconciliation report.",
	//   "flatPath": "v3/accounts/{accountsId}/reconciliationReports/{reconciliationReportsId}",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.reconciliationReports.get",
	//   "parameterOrder": [
	//     "name"
	//   ],
	//   "parameters": {
	//     "name": {
	//       "description": "The resource name of the reconciliation report to fetch. The format is `accounts/{account_id}/reconciliationReports/{datetime}~{filename}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+/reconciliationReports/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+name}",
	//   "response": {
	//     "$ref": "ReconciliationReport"
	//   }
	// }

}

// method id "travelpartner.accounts.reconciliationReports.list":

type AccountsReconciliationReportsListCall struct {
	s            *Service
	parent       string
	urlParams_   gensupport.URLParams
	ifNoneMatch_ string
	ctx_         context.Context
	header_      http.Header
}

// List: Returns a list of the names of created reconciliation reports.
//
//   - parent: The resource name of the account being queried. The format
//     is `accounts/{account_id}`.
func (r *AccountsReconciliationReportsService) List(parent string) *AccountsReconciliationReportsListCall {
	c := &AccountsReconciliationReportsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	return c
}

// EndDate sets the optional parameter "endDate": End of date range to
// fetch files for. Format is yyyy-mm-dd[THH[:MM[:SS]]]. If empty,
// reports until the end of time are fetched.
func (c *AccountsReconciliationReportsListCall) EndDate(endDate string) *AccountsReconciliationReportsListCall {
	c.urlParams_.Set("endDate", endDate)
	return c
}

// StartDate sets the optional parameter "startDate": Beginning of date
// range to fetch files for. Format is yyyy-MM-dd[THH[:mm[:SS]]]. If
// empty, reports from the beginning of time onwards are fetched.
func (c *AccountsReconciliationReportsListCall) StartDate(startDate string) *AccountsReconciliationReportsListCall {
	c.urlParams_.Set("startDate", startDate)
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsReconciliationReportsListCall) Fields(s ...googleapi.Field) *AccountsReconciliationReportsListCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// IfNoneMatch sets the optional parameter which makes the operation
// fail if the object's ETag matches the given value. This is useful for
// getting updates only after the object has changed since the last
// request. Use googleapi.IsNotModified to check whether the response
// error from Do is the result of In-None-Match.
func (c *AccountsReconciliationReportsListCall) IfNoneMatch(entityTag string) *AccountsReconciliationReportsListCall {
	c.ifNoneMatch_ = entityTag
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsReconciliationReportsListCall) Context(ctx context.Context) *AccountsReconciliationReportsListCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsReconciliationReportsListCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsReconciliationReportsListCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	if c.ifNoneMatch_ != "" {
		reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
	}
	var body io.Reader = nil
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/reconciliationReports")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("GET", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.reconciliationReports.list" call.
// Exactly one of *ListReconciliationReportsResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *ListReconciliationReportsResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *AccountsReconciliationReportsListCall) Do(opts ...googleapi.CallOption) (*ListReconciliationReportsResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &ListReconciliationReportsResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Returns a list of the names of created reconciliation reports.",
	//   "flatPath": "v3/accounts/{accountsId}/reconciliationReports",
	//   "httpMethod": "GET",
	//   "id": "travelpartner.accounts.reconciliationReports.list",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "endDate": {
	//       "description": "End of date range to fetch files for. Format is yyyy-mm-dd[THH[:MM[:SS]]]. If empty, reports until the end of time are fetched.",
	//       "location": "query",
	//       "type": "string"
	//     },
	//     "parent": {
	//       "description": "The resource name of the account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     },
	//     "startDate": {
	//       "description": "Beginning of date range to fetch files for. Format is yyyy-MM-dd[THH[:mm[:SS]]]. If empty, reports from the beginning of time onwards are fetched.",
	//       "location": "query",
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/reconciliationReports",
	//   "response": {
	//     "$ref": "ListReconciliationReportsResponse"
	//   }
	// }

}

// method id "travelpartner.accounts.reconciliationReports.validate":

type AccountsReconciliationReportsValidateCall struct {
	s                    *Service
	parent               string
	reconciliationreport *ReconciliationReport
	urlParams_           gensupport.URLParams
	ctx_                 context.Context
	header_              http.Header
}

// Validate: Validates a reconciliation report.
//
//   - parent: The resource name of the account being queried. The format
//     is `accounts/{account_id}`.
func (r *AccountsReconciliationReportsService) Validate(parent string, reconciliationreport *ReconciliationReport) *AccountsReconciliationReportsValidateCall {
	c := &AccountsReconciliationReportsValidateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
	c.parent = parent
	c.reconciliationreport = reconciliationreport
	return c
}

// Fields allows partial responses to be retrieved. See
// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
// for more information.
func (c *AccountsReconciliationReportsValidateCall) Fields(s ...googleapi.Field) *AccountsReconciliationReportsValidateCall {
	c.urlParams_.Set("fields", googleapi.CombineFields(s))
	return c
}

// Context sets the context to be used in this call's Do method. Any
// pending HTTP request will be aborted if the provided context is
// canceled.
func (c *AccountsReconciliationReportsValidateCall) Context(ctx context.Context) *AccountsReconciliationReportsValidateCall {
	c.ctx_ = ctx
	return c
}

// Header returns an http.Header that can be modified by the caller to
// add HTTP headers to the request.
func (c *AccountsReconciliationReportsValidateCall) Header() http.Header {
	if c.header_ == nil {
		c.header_ = make(http.Header)
	}
	return c.header_
}

func (c *AccountsReconciliationReportsValidateCall) doRequest(alt string) (*http.Response, error) {
	reqHeaders := make(http.Header)
	reqHeaders.Set("x-goog-api-client", "gl-go/"+gensupport.GoVersion()+" gdcl/"+internal.Version)
	for k, v := range c.header_ {
		reqHeaders[k] = v
	}
	reqHeaders.Set("User-Agent", c.s.userAgent())
	var body io.Reader = nil
	body, err := googleapi.WithoutDataWrapper.JSONReader(c.reconciliationreport)
	if err != nil {
		return nil, err
	}
	reqHeaders.Set("Content-Type", "application/json")
	c.urlParams_.Set("alt", alt)
	c.urlParams_.Set("prettyPrint", "false")
	urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+parent}/reconciliationReports:validate")
	urls += "?" + c.urlParams_.Encode()
	req, err := http.NewRequest("POST", urls, body)
	if err != nil {
		return nil, err
	}
	req.Header = reqHeaders
	googleapi.Expand(req.URL, map[string]string{
		"parent": c.parent,
	})
	return gensupport.SendRequest(c.ctx_, c.s.client, req)
}

// Do executes the "travelpartner.accounts.reconciliationReports.validate" call.
// Exactly one of *ValidateReconciliationReportResponse or error will be
// non-nil. Any non-2xx status code is an error. Response headers are in
// either *ValidateReconciliationReportResponse.ServerResponse.Header or
// (if a response was returned at all) in
// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
// whether the returned error was because http.StatusNotModified was
// returned.
func (c *AccountsReconciliationReportsValidateCall) Do(opts ...googleapi.CallOption) (*ValidateReconciliationReportResponse, error) {
	gensupport.SetOptions(c.urlParams_, opts...)
	res, err := c.doRequest("json")
	if res != nil && res.StatusCode == http.StatusNotModified {
		if res.Body != nil {
			res.Body.Close()
		}
		return nil, gensupport.WrapError(&googleapi.Error{
			Code:   res.StatusCode,
			Header: res.Header,
		})
	}
	if err != nil {
		return nil, err
	}
	defer googleapi.CloseBody(res)
	if err := googleapi.CheckResponse(res); err != nil {
		return nil, gensupport.WrapError(err)
	}
	ret := &ValidateReconciliationReportResponse{
		ServerResponse: googleapi.ServerResponse{
			Header:         res.Header,
			HTTPStatusCode: res.StatusCode,
		},
	}
	target := &ret
	if err := gensupport.DecodeResponse(target, res); err != nil {
		return nil, err
	}
	return ret, nil
	// {
	//   "description": "Validates a reconciliation report.",
	//   "flatPath": "v3/accounts/{accountsId}/reconciliationReports:validate",
	//   "httpMethod": "POST",
	//   "id": "travelpartner.accounts.reconciliationReports.validate",
	//   "parameterOrder": [
	//     "parent"
	//   ],
	//   "parameters": {
	//     "parent": {
	//       "description": "The resource name of the account being queried. The format is `accounts/{account_id}`.",
	//       "location": "path",
	//       "pattern": "^accounts/[^/]+$",
	//       "required": true,
	//       "type": "string"
	//     }
	//   },
	//   "path": "v3/{+parent}/reconciliationReports:validate",
	//   "request": {
	//     "$ref": "ReconciliationReport"
	//   },
	//   "response": {
	//     "$ref": "ValidateReconciliationReportResponse"
	//   }
	// }

}
